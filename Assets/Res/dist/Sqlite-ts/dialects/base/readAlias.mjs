import { DialectBase } from './index.mjs';
import { Condition } from '../../condition.mjs';
import { Utils } from '../../utils.mjs';
export class ReadAliasDialect extends DialectBase {
    constructor(info, sql, kind, aliases, map) {
        super(info);
        this.kind = kind;
        this.sql = sql;
        this.aliases = aliases;
        this.map = map;
    }
    limit(limit, offset) {
        this.sql += ` LIMIT ${limit}`;
        if (offset !== undefined) {
            this.sql += ` OFFSET ${offset}`;
        }
        return this;
    }
    orderBy(order) {
        if (!this.aliases) {
            throw new Error('Alias needed to build WHERE statement.');
        }
        let sql = ' ORDER BY';
        for (const k of Object.keys(order)) {
            const fOrder = order[k];
            for (const o of Object.keys(fOrder)) {
                sql += ` ${Utils.quote(k)}.${Utils.quote(o)} ${fOrder[o]}`;
            }
        }
        this.sql += sql;
        return this;
    }
    where(fields) {
        if (!this.aliases) {
            throw new Error('Alias needed to build WHERE statement.');
        }
        const rightDescriptor = {};
        const leftDescriptor = {};
        for (const k of Object.keys(this.aliases)) {
            const a = this.aliases[k];
            leftDescriptor[k] = new Condition(a.descriptor, a.columns, k);
            rightDescriptor[k] = {};
            for (const c of Object.keys(a.columns)) {
                rightDescriptor[k][c] = `field:${k}.${c}`;
            }
        }
        fields(leftDescriptor, rightDescriptor);
        const sqls = [];
        for (const k of Object.keys(leftDescriptor)) {
            sqls.push(leftDescriptor[k].sql());
        }
        this.sql += 'WHERE ' + sqls.filter(s => s.trim() !== '').join(' AND ');
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZEFsaWFzLm1qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL1BhY2thZ2VzL1RzUHJvai9zcmMvU3FsaXRlLXRzL2RpYWxlY3RzL2Jhc2UvcmVhZEFsaWFzLm10cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUE2QixNQUFNLGFBQWEsQ0FBQTtBQUNwRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFFL0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBK0J2QyxNQUFNLE9BQU8sZ0JBQTBCLFNBQVEsV0FBaUI7SUFJNUQsWUFDSSxJQUFrQixFQUNsQixHQUFXLEVBQ1gsSUFBaUIsRUFDakIsT0FBK0IsRUFDL0IsR0FBUTtRQUVSLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNYLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBO1FBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUE7SUFDbEIsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFhLEVBQUUsTUFBZTtRQUN2QyxJQUFJLENBQUMsR0FBRyxJQUFJLFVBQVUsS0FBSyxFQUFFLENBQUE7UUFDN0IsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLEdBQUcsSUFBSSxXQUFXLE1BQU0sRUFBRSxDQUFBO1FBQ25DLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQTtJQUNmLENBQUM7SUFFTSxPQUFPLENBQ1YsS0FNQztRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFBO1FBQzdELENBQUM7UUFFRCxJQUFJLEdBQUcsR0FBRyxXQUFXLENBQUE7UUFDckIsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDakMsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3ZCLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO2dCQUNsQyxHQUFHLElBQUksSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7WUFDOUQsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQTtRQUVmLE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQztJQUVNLEtBQUssQ0FDUixNQU9ZO1FBRVosSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUE7UUFDN0QsQ0FBQztRQUVELE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQTtRQUMxQixNQUFNLGNBQWMsR0FBMkIsRUFBRSxDQUFBO1FBRWpELEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUN4QyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3pCLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDN0QsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUN2QixLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ3JDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQTtZQUM3QyxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sQ0FBQyxjQUFxQixFQUFFLGVBQXNCLENBQUMsQ0FBQTtRQUNyRCxNQUFNLElBQUksR0FBYSxFQUFFLENBQUE7UUFDekIsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7WUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQTtRQUN0QyxDQUFDO1FBRUQsSUFBSSxDQUFDLEdBQUcsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFdEUsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0NBQ0oifQ==