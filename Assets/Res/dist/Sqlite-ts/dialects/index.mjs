import { Utils } from '../utils.mjs';
import { DialectBase, DialectKind } from './base/index.mjs';
import { ReadDialect } from './base/read.mjs';
import { WhereDialect } from './base/where.mjs';
import { JoinCondition, JoinMapper } from './join/index.mjs';
export class Dialect extends DialectBase {
    constructor(info) {
        super(info);
        this.update = this.update.bind(this);
    }
    create() {
        const { name, columns } = this.info;
        const cols = Object.keys(columns).map(key => {
            const column = columns[key];
            const colType = Utils.getRealColumnType(key, column);
            const colPrimary = column.primary ? ' PRIMARY KEY' : '';
            return `${Utils.quote(key)} ${colType}${colPrimary}`;
        });
        this.sql = `CREATE TABLE IF NOT EXISTS ${Utils.quote(name)} (${cols.join(', ')})`;
        console.log(`sql: ${this.sql}`);
        this.kind = DialectKind.WRITE;
        return this;
    }
    drop() {
        this.sql = `DROP TABLE IF EXISTS ${Utils.quote(this.info.name)}`;
        this.kind = DialectKind.WRITE;
        return this;
    }
    select(fields) {
        this.kind = DialectKind.READ;
        return this.__select(fields);
    }
    single(fields) {
        this.kind = DialectKind.SINGLE;
        return this.__select(fields);
    }
    join(selector, clause) {
        const result = JoinCondition.buildSql(this.info, selector, clause);
        return new JoinMapper(this.info, result.tables, result.sql);
    }
    count() {
        this.sql = `SELECT COUNT(*) as count FROM ${Utils.quote(this.info.name)}`;
        return new ReadDialect(this.info, this.sql, DialectKind.COUNT);
    }
    any() {
        this.sql = `SELECT COUNT(*) as count FROM ${Utils.quote(this.info.name)}`;
        return new ReadDialect(this.info, this.sql, DialectKind.ANY);
    }
    insert(set, upsert) {
        this.kind = DialectKind.WRITE;
        if (set instanceof Array) {
            return this.__insertMany(set);
        }
        return this.__insert(set, upsert);
    }
    upsert(set) {
        return this.insert(set, true);
    }
    update(set) {
        const sql = `UPDATE ${Utils.quote(this.info.name)}
                     SET ${Object.keys(set)
            .map(k => `${Utils.quote(k)} = ${Utils.asValue(this.info.columns[k].type, set[k])}`)
            .join(', ')}`;
        this.sql = sql;
        return new WhereDialect(this.info, this.sql, DialectKind.WRITE);
    }
    delete() {
        this.sql = `DELETE FROM ${Utils.quote(this.info.name)}`;
        return new WhereDialect(this.info, this.sql, DialectKind.WRITE);
    }
    __select(fields) {
        let sql;
        if (!fields || fields === '*') {
            sql = this._buildSelectFields(Object.keys(this.info.columns));
        }
        else {
            sql = this._select(fields);
        }
        this.sql = `SELECT ${sql} FROM ${Utils.quote(this.info.name)}`;
        return new ReadDialect(this.info, this.sql, this.kind);
    }
    __insert(set, upsert) {
        const fields = [];
        const values = [];
        for (const key of Object.keys(set)) {
            fields.push(key);
            values.push(Utils.asValue(this.info.columns[key].type, set[key]));
        }
        const sqlUpsert = upsert ? ' OR REPLACE' : '';
        const sql = `INSERT${sqlUpsert} INTO ${Utils.quote(this.info.name)} (${fields.map(Utils.quote)}) VALUES (${values})`;
        this.sql = sql;
        return this;
    }
    __insertMany(sets) {
        if (!sets.length) {
            throw new Error('No insert data defined.');
        }
        const fields = [];
        const set = sets.shift();
        const selectVal = [];
        for (const key of Object.keys(set)) {
            fields.push(key);
            selectVal.push(Utils.asValue(this.info.columns[key].type, set[key]) +
                ' AS ' +
                Utils.quote(key));
        }
        const unions = sets.map(s => {
            return `UNION ALL SELECT ${fields.map(k => Utils.asValue(this.info.columns[k].type, s[k]))}`;
        });
        const sql = `INSERT INTO ${Utils.quote(this.info.name)} (${fields.map(Utils.quote)}) SELECT ${selectVal} ${unions.join(' ')}`;
        this.sql = sql;
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubWpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vUGFja2FnZXMvVHNQcm9qL3NyYy9TcWxpdGUtdHMvZGlhbGVjdHMvaW5kZXgubXRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQWdCLE1BQU0sa0JBQWtCLENBQUE7QUFDekUsT0FBTyxFQUFpQixXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUM1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUU1RCxNQUFNLE9BQU8sT0FBZ0IsU0FBUSxXQUFtQjtJQUNwRCxZQUFZLElBQWtCO1FBQzFCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNYLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDeEMsQ0FBQztJQUVELE1BQU07UUFDRixNQUFNLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUE7UUFFakMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDeEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQzNCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDcEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7WUFDdkQsT0FB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