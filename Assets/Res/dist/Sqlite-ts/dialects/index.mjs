import { Utils } from '../utils.mjs';
import { DialectBase, DialectKind } from './base/index.mjs';
import { ReadDialect } from './base/read.mjs';
import { WhereDialect } from './base/where.mjs';
import { JoinCondition, JoinMapper } from './join/index.mjs';
export class Dialect extends DialectBase {
    constructor(info) {
        super(info);
        this.update = this.update.bind(this);
    }
    create() {
        const { name, columns } = this.info;
        const cols = Object.keys(columns).map(key => {
            const column = columns[key];
            const colType = Utils.getRealColumnType(key, column);
            const colPrimary = column.primary ? ' PRIMARY KEY' : '';
            return `${Utils.quote(key)} ${colType}${colPrimary}`;
        });
        this.sql = `CREATE TABLE IF NOT EXISTS ${Utils.quote(name)} (${cols.join(', ')})`;
        this.kind = DialectKind.WRITE;
        return this;
    }
    drop() {
        this.sql = `DROP TABLE IF EXISTS ${Utils.quote(this.info.name)}`;
        this.kind = DialectKind.WRITE;
        return this;
    }
    select(fields) {
        this.kind = DialectKind.READ;
        return this.__select(fields);
    }
    single(fields) {
        this.kind = DialectKind.SINGLE;
        return this.__select(fields);
    }
    join(selector, clause) {
        const result = JoinCondition.buildSql(this.info, selector, clause);
        return new JoinMapper(this.info, result.tables, result.sql);
    }
    count() {
        this.sql = `SELECT COUNT(*) as count FROM ${Utils.quote(this.info.name)}`;
        return new ReadDialect(this.info, this.sql, DialectKind.COUNT);
    }
    any() {
        this.sql = `SELECT COUNT(*) as count FROM ${Utils.quote(this.info.name)}`;
        return new ReadDialect(this.info, this.sql, DialectKind.ANY);
    }
    insert(set, upsert) {
        this.kind = DialectKind.WRITE;
        if (set instanceof Array) {
            return this.__insertMany(set);
        }
        return this.__insert(set, upsert);
    }
    upsert(set) {
        return this.insert(set, true);
    }
    update(set) {
        const sql = `UPDATE ${Utils.quote(this.info.name)} SET ${Object.keys(set)
            .map(k => `${Utils.quote(k)} = ${Utils.asValue(this.info.columns[k].type, set[k])}`)
            .join(', ')}`;
        this.sql = sql;
        return new WhereDialect(this.info, this.sql, DialectKind.WRITE);
    }
    delete() {
        this.sql = `DELETE FROM ${Utils.quote(this.info.name)}`;
        return new WhereDialect(this.info, this.sql, DialectKind.WRITE);
    }
    __select(fields) {
        let sql;
        if (!fields || fields === '*') {
            sql = this._buildSelectFields(Object.keys(this.info.columns));
        }
        else {
            sql = this._select(fields);
        }
        this.sql = `SELECT ${sql} FROM ${Utils.quote(this.info.name)}`;
        return new ReadDialect(this.info, this.sql, this.kind);
    }
    __insert(set, upsert) {
        const fields = [];
        const values = [];
        for (const key of Object.keys(set)) {
            fields.push(key);
            values.push(Utils.asValue(this.info.columns[key].type, set[key]));
        }
        const sqlUpsert = upsert ? ' OR REPLACE' : '';
        const sql = `INSERT${sqlUpsert} INTO ${Utils.quote(this.info.name)} (${fields.map(Utils.quote)}) VALUES (${values})`;
        this.sql = sql;
        return this;
    }
    __insertMany(sets) {
        if (!sets.length) {
            throw new Error('No insert data defined.');
        }
        const fields = [];
        const set = sets.shift();
        const selectVal = [];
        for (const key of Object.keys(set)) {
            fields.push(key);
            selectVal.push(Utils.asValue(this.info.columns[key].type, set[key]) +
                ' AS ' +
                Utils.quote(key));
        }
        const unions = sets.map(s => {
            return `UNION ALL SELECT ${fields.map(k => Utils.asValue(this.info.columns[k].type, s[k]))}`;
        });
        const sql = `INSERT INTO ${Utils.quote(this.info.name)} (${fields.map(Utils.quote)}) SELECT ${selectVal} ${unions.join(' ')}`;
        this.sql = sql;
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubWpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vUGFja2FnZXMvVHNQcm9qL3NyYy9TcWxpdGUtdHMvZGlhbGVjdHMvaW5kZXgubXRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQWdCLE1BQU0sa0JBQWtCLENBQUE7QUFDekUsT0FBTyxFQUFpQixXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUM1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUU1RCxNQUFNLE9BQU8sT0FBZ0IsU0FBUSxXQUFtQjtJQUN0RCxZQUFZLElBQWtCO1FBQzVCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNYLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUVELE1BQU07UUFDSixNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUE7UUFFbkMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDMUMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQzNCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDcEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7WUFDdkQsT0FB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