export class Utils {
    static quote(str) {
        return `"${str}"`;
    }
    static getRealColumnType(name, info) {
        const colSize = info.size ? `(${info.size})` : ``;
        switch (info.type) {
            case 'BOOLEAN':
                return `BOOLEAN NOT NULL CHECK (${name} IN (0,1))`;
            case 'MONEY':
            case 'DATETIME':
                return `INTEGER`;
            default:
                return `${info.type}${colSize}`;
        }
    }
    static asResult(colType, v) {
        switch (colType) {
            case 'DATETIME':
                return this.dateParse(v);
            case 'BOOLEAN':
                return v === 0 ? false : true;
            case 'MONEY':
                return v / 100;
        }
        return v;
    }
    static asValue(colType, v) {
        // TODO:  This is not good idea to use 'field:' prefix
        //        use function might be good!
        if (typeof v === 'string' && v.startsWith('field:')) {
            return v.substr(6);
        }
        switch (colType) {
            case 'DATETIME':
                return this.strftime(v);
            case 'MONEY':
                return Math.round(v * 100);
        }
        switch (typeof v) {
            case 'string':
                return `'${v.replace(/\'/g, "''")}'`;
            case 'undefined':
                return 'null';
            case 'boolean':
                return v === true ? '1' : '0';
        }
        if (v === null) {
            return 'null';
        }
        return v;
    }
    static asRawValue(colType, v) {
        if (v === null) {
            return 'NULL';
        }
        switch (colType) {
            case 'DATETIME':
            case 'INTEGER':
            case 'BOOLEAN':
            case 'DECIMAL':
                return v;
        }
        return `'${v}'`;
    }
    static timeStamp(date) {
        return date
            .toISOString()
            .slice(0, 19)
            .replace(/\-/g, '')
            .replace(/\:/g, '')
            .replace('T', '-');
    }
    static strftime(date) {
        return `strftime('%s', '${this.formatSimpleISODate(date)}')`;
    }
    static formatSimpleISODate(date) {
        return `${date.getFullYear()}-${this.padStart(date.getMonth() + 1, 2)}-${this.padStart(date.getDate(), 2)} ${this.padStart(date.getHours(), 2)}:${this.padStart(date.getMinutes(), 2)}:${this.padStart(date.getSeconds(), 2)}`;
    }
    static padStart(str, targetLength, padString = '0') {
        str = str.toString();
        padString = String(typeof padString !== 'undefined' ? padString : ' ');
        if (str.length > targetLength) {
            return str;
        }
        else {
            targetLength = targetLength - str.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length);
            }
            return padString.slice(0, targetLength) + str;
        }
    }
    static dateParse(str) {
        const parts = str.split(' ');
        const dates = parts[0].split('-').map(d => parseInt(d, 0));
        const times = parts[1].split(':').map(d => parseInt(d, 0));
        return new Date(dates[0], dates[1] - 1, dates[2], times[0], times[1], times[2]);
    }
    static selectAs(info, fieldname, as) {
        const field = Utils.quote(fieldname);
        if (info.type === 'DATETIME') {
            return Utils.selectAsDate(field, as);
        }
        if (as) {
            return `${field} AS ${Utils.quote(as)}`;
        }
        return field;
    }
    static selectAsDate(field, asField = field) {
        return `datetime(${field},'unixepoch') AS ${asField}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMubWpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vUGFja2FnZXMvVHNQcm9qL3NyYy9TcWxpdGUtdHMvdXRpbHMubXRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sT0FBTyxLQUFLO0lBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFXO1FBQ3BCLE9BQU8sSUFBSSxHQUFHLEdBQUcsQ0FBQTtJQUNyQixDQUFDO0lBRUQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLElBQVksRUFBRSxJQUFnQjtRQUNuRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO1FBRWpELFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2hCLEtBQUssU0FBUztnQkFDVixPQUFPLDJCQUEyQixJQUFJLFlBQVksQ0FBQTtZQUN0RCxLQUFLLE9BQU8sQ0FBQztZQUNiLEtBQUssVUFBVTtnQkFDWCxPQUFPLFNBQVMsQ0FBQTtZQUNwQjtnQkFDSSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLEVBQUUsQ0FBQTtRQUN2QyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBb0IsRUFBRSxDQUFNO1FBQ3hDLFFBQVEsT0FBTyxFQUFFLENBQUM7WUFDZCxLQUFLLFVBQVU7Z0JBQ1gsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzVCLEtBQUssU0FBUztnQkFDVixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO1lBQ2pDLEtBQUssT0FBTztnQkFDUixPQUFPLENBQUMsR0FBRyxHQUFHLENBQUE7UUFDdEIsQ0FBQztRQUVELE9BQU8sQ0FBQyxDQUFBO0lBQ1osQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBb0IsRUFBRSxDQUFNO1FBRXZDLHNEQUFzRDtRQUN0RCxxQ0FBcUM7UUFDckMsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQ2xELE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN0QixDQUFDO1FBRUQsUUFBUSxPQUFPLEVBQUUsQ0FBQztZQUNkLEtBQUssVUFBVTtnQkFDWCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDM0IsS0FBSyxPQUFPO2dCQUNSLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUE7UUFDbEMsQ0FBQztRQUVELFFBQVEsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNmLEtBQUssUUFBUTtnQkFDVCxPQUFPLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQTtZQUV4QyxLQUFLLFdBQVc7Z0JBQ1osT0FBTyxNQUFNLENBQUE7WUFFakIsS0FBSyxTQUFTO2dCQUNWLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUE7UUFDckMsQ0FBQztRQUVELElBQUksQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ2IsT0FBTyxNQUFNLENBQUE7UUFDakIsQ0FBQztRQUVELE9BQU8sQ0FBQyxDQUFBO0lBQ1osQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBb0IsRUFBRSxDQUFNO1FBQzFDLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ2IsT0FBTyxNQUFNLENBQUE7UUFDakIsQ0FBQztRQUVELFFBQVEsT0FBTyxFQUFFLENBQUM7WUFDZCxLQUFLLFVBQVUsQ0FBQztZQUNoQixLQUFLLFNBQVMsQ0FBQztZQUNmLEtBQUssU0FBUyxDQUFDO1lBQ2YsS0FBSyxTQUFTO2dCQUNWLE9BQU8sQ0FBQyxDQUFBO1FBQ2hCLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUE7SUFDbkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBVTtRQUN2QixPQUFPLElBQUk7YUFDTixXQUFXLEVBQUU7YUFDYixLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQzthQUNaLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO2FBQ2xCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO2FBQ2xCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBVTtRQUN0QixPQUFPLG1CQUFtQixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQTtJQUNoRSxDQUFDO0lBRUQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLElBQVU7UUFDakMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUN6QyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxFQUNuQixDQUFDLENBQ0osSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUNsRCxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQ2YsQ0FBQyxDQUNKLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FDckQsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUNqQixDQUFDLENBQ0osRUFBRSxDQUFBO0lBQ1AsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQ1gsR0FBUSxFQUNSLFlBQW9CLEVBQ3BCLFlBQW9CLEdBQUc7UUFFdkIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUNwQixTQUFTLEdBQUcsTUFBTSxDQUFDLE9BQU8sU0FBUyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN0RSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsWUFBWSxFQUFFLENBQUM7WUFDNUIsT0FBTyxHQUFHLENBQUE7UUFDZCxDQUFDO2FBQU0sQ0FBQztZQUNKLFlBQVksR0FBRyxZQUFZLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQTtZQUN4QyxJQUFJLFlBQVksR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ2xDLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDbEUsQ0FBQztZQUNELE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLEdBQUcsR0FBRyxDQUFBO1FBQ2pELENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFXO1FBQ3hCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDNUIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDMUQsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFMUQsT0FBTyxJQUFJLElBQUksQ0FDWCxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ1IsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDWixLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ1IsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUNSLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFDUixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQ1gsQ0FBQTtJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQWdCLEVBQUUsU0FBaUIsRUFBRSxFQUFXO1FBQzVELE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDcEMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRSxDQUFDO1lBQzNCLE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDeEMsQ0FBQztRQUVELElBQUksRUFBRSxFQUFFLENBQUM7WUFDTCxPQUFPLEdBQUcsS0FBSyxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQTtRQUMzQyxDQUFDO1FBRUQsT0FBTyxLQUFLLENBQUE7SUFDaEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBYSxFQUFFLFVBQWtCLEtBQUs7UUFDdEQsT0FBTyxZQUFZLEtBQUssb0JBQW9CLE9BQU8sRUFBRSxDQUFBO0lBQ3pELENBQUM7Q0FDSiJ9