import { Scope } from './scope.mjs';
import { Table } from './table.mjs';
export class Db {
    /**
     * Create new database instance.
     * @param config Database Configuration
     */
    static async init(config) {
        const _db = new Db();
        if (config.driver.init) {
            await config.driver.init();
        }
        _db.config = config;
        _db.driver = config.driver;
        try {
            _db.tables = _db.buildTables();
            if (config.createTables || config.createTables === undefined) {
                await _db.createAllTables();
            }
            return _db;
        }
        catch (error) {
            throw new Error(error);
        }
    }
    constructor() {
        this.transaction = this.transaction.bind(this);
    }
    async close() {
        return this.config.driver.close();
    }
    buildTables() {
        const tables = {};
        const cls = this.config.entities;
        for (const key of Object.keys(cls)) {
            const table = new Table(cls[key], key, this);
            tables[key] = table;
        }
        return tables;
    }
    transaction(scope) {
        return new Promise((resolve, reject) => {
            const resultSets = [];
            this.driver.transaction(tx => {
                const { tables, exec } = new Scope(this, tx);
                scope({ tables, exec });
            }, reject, () => {
                resolve(resultSets);
            });
        });
    }
    exec(sql, args) {
        return new Promise((resolve, reject) => {
            this.driver.transaction(tx => {
                tx.execSql(sql, args, res => {
                    resolve(this.driver.getQueryResult(res));
                }, reject);
            });
        });
    }
    query(sql, args) {
        return new Promise((resolve, reject) => {
            this.driver.query(sql, args || [], reject, res => {
                resolve(this.driver.getQueryResult(res).rows.items());
            });
        });
    }
    single(sql, args) {
        return new Promise((resolve, reject) => {
            this.driver.query(sql, args || [], reject, res => {
                resolve(this.driver.getQueryResult(res).rows.item(0));
            });
        });
    }
    async dropAllTables() {
        return this.transaction(({ tables, exec }) => {
            for (const key of Object.keys(tables)) {
                exec(tables[key].drop());
            }
        });
    }
    async createAllTables() {
        return this.transaction(({ tables, exec }) => {
            for (const key of Object.keys(tables)) {
                exec(tables[key].create());
            }
        });
    }
    async generateBackupSql() {
        const sqlCreates = [];
        const sqlInserts = [];
        for (const key of Object.keys(this.tables)) {
            const tbl = this.tables[key];
            tbl.create();
            sqlCreates.push(tbl.sql);
            sqlInserts.push(await tbl.buildBackupSql());
        }
        return (sqlCreates.join('\r\n') +
            '\r\n' +
            sqlInserts.filter(s => s !== '').join('\r\n'));
    }
    async restoreFromSql(sql, recreate) {
        if (recreate) {
            await this.dropAllTables();
        }
        await this.transaction(({ exec }) => {
            const sqls = sql.split('\r\n');
            for (const s of sqls) {
                if (s.startsWith('CREATE')) {
                    if (recreate) {
                        exec(s);
                    }
                }
                else if (s.startsWith('INSERT')) {
                    exec(s);
                }
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGIubWpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vUGFja2FnZXMvVHNQcm9qL3NyYy9TcWxpdGUtdHMvZGIubXRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQW9CLE1BQU0sYUFBYSxDQUFBO0FBQ3JELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFhbkMsTUFBTSxPQUFPLEVBQUU7SUFDWDs7O09BR0c7SUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBVSxNQUF5QjtRQUNoRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEVBQUUsRUFBVyxDQUFBO1FBRTdCLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNyQixNQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDOUIsQ0FBQztRQUVELEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBQ25CLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQTtRQUUxQixJQUFJLENBQUM7WUFDRCxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtZQUM5QixJQUFJLE1BQU0sQ0FBQyxZQUFZLElBQUksTUFBTSxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUUsQ0FBQztnQkFDM0QsTUFBTSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUE7WUFDL0IsQ0FBQztZQUNELE9BQU8sR0FBRyxDQUFBO1FBQ2QsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixNQUFNLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQzFCLENBQUM7SUFDTCxDQUFDO0lBTUQ7UUFDSSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2xELENBQUM7SUFFRCxL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