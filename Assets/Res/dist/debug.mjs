var HubConnection = CS.BestHTTP.SignalRCore.HubConnection;
var MessagePackProtocol = CS.BestHTTP.SignalRCore.Encoders.MessagePackProtocol;
var Uri = CS.System.Uri;
var $promise = puer.$promise;
var UnityApi = CS.UnityApi;
var Person = CS.Api.Person;
var String = CS.System.String;
var $typeof = puer.$typeof;
var Type = CS.System.Type;
import { iterator } from "Common/Iterator.mjs";
var Single = CS.System.Single;
export const DevDebug = async function () {
    UnityApi.Log([{
            say: "hello, world",
            me: 1,
            test: {
                you: "love it", val: {
                    ok: true
                }
            }
        }, {
            k: [111],
            other: "rich",
            money: 100,
        }]);
};
export const say = function (...args) {
    console.log(...args);
    let test = $typeof(String).CreateList();
    let t = $typeof(Type).CreateArray($typeof(Type));
    //let n = new array
    let dictionary = $typeof(String).CreateDictionary($typeof(Single));
    let arr = [];
};
export const network = async function (...args) {
    const url = "http://192.168.1.65:5000/";
    const protocol = new MessagePackProtocol();
    console.log(url);
    const hub = new HubConnection(new Uri(url), protocol);
    hub.On("Send", $typeof(Type).CreateArray($typeof(String)), (msg) => {
        iterator(msg).forEach(t => console.log(t));
    });
    hub.On("Person", $typeof(Type).CreateArray($typeof(Person)), (msg) => {
        iterator(msg).forEach(t => console.log(t));
    });
    hub.On("TwoPersons", $typeof(Type).CreateArray($typeof(Person), $typeof(Person)), (msg) => {
        iterator(msg).forEach(t => console.log(t));
    });
    await $promise(hub.ConnectAsync());
    await $promise(hub.SendAsync("Send", "my message"));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWcubWpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vUGFja2FnZXMvVHNQcm9qL3NyYy9kZWJ1Zy5tdHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxhQUFhLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0FBQzdELElBQU8sbUJBQW1CLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDO0FBQ2xGLElBQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQzNCLElBQU8sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDaEMsSUFBTyxRQUFRLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUM5QixJQUFPLE1BQU0sR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztBQUM5QixJQUFPLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUVqQyxJQUFPLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQzlCLElBQU8sSUFBSSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQzdCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQU8vQyxJQUFPLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUVqQyxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsS0FBSztJQUN6QixRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDVixHQUFHLEVBQUUsY0FBYztZQUNuQixFQUFFLEVBQUUsQ0FBQztZQUNMLElBQUksRUFBRTtnQkFDRixHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRTtvQkFDakIsRUFBRSxFQUFFLElBQUk7aUJBQ1g7YUFDSjtTQUNKLEVBQUU7WUFDQyxDQUFDLEVBQUUsQ0FB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