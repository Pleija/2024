var t, e;
t = self, e = () => (() => { var t = { d: (e, s) => { for (var i in s)
        t.o(s, i) && !t.o(e, i) && Object.defineProperty(e, i, { enumerable: !0, get: s[i] }); } }; t.g = function () { if ("object" == typeof globalThis)
    return globalThis; try {
    return this || new Function("return this")();
}
catch (t) {
    if ("object" == typeof window)
        return window;
} }(), t.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e), t.r = t => { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "t", { value: !0 }); }; var e, s = {}; t.r(s), t.d(s, { AbortError: () => r, DefaultHttpClient: () => H, HttpClient: () => d, HttpError: () => i, HttpResponse: () => u, HttpTransportType: () => W, HubConnection: () => N, HubConnectionBuilder: () => Y, HubConnectionState: () => A, JsonHubProtocol: () => K, LogLevel: () => e, MessageType: () => R, NullLogger: () => p, Subject: () => U, TimeoutError: () => n, TransferFormat: () => O, VERSION: () => f }); class i extends Error {
    constructor(t, e) { const s = new.target.prototype; super(`${t}: Status code '${e}'`), this.statusCode = e, this.__proto__ = s; }
} class n extends Error {
    constructor(t = "A timeout occurred.") { const e = new.target.prototype; super(t), this.__proto__ = e; }
} class r extends Error {
    constructor(t = "An abort occurred.") { const e = new.target.prototype; super(t), this.__proto__ = e; }
} class o extends Error {
    constructor(t, e) { const s = new.target.prototype; super(t), this.transport = e, this.errorType = "UnsupportedTransportError", this.__proto__ = s; }
} class h extends Error {
    constructor(t, e) { const s = new.target.prototype; super(t), this.transport = e, this.errorType = "DisabledTransportError", this.__proto__ = s; }
} class c extends Error {
    constructor(t, e) { const s = new.target.prototype; super(t), this.transport = e, this.errorType = "FailedToStartTransportError", this.__proto__ = s; }
} class a extends Error {
    constructor(t) { const e = new.target.prototype; super(t), this.errorType = "FailedToNegotiateWithServerError", this.__proto__ = e; }
} class l extends Error {
    constructor(t, e) { const s = new.target.prototype; super(t), this.innerErrors = e, this.__proto__ = s; }
} class u {
    constructor(t, e, s) { this.statusCode = t, this.statusText = e, this.content = s; }
} class d {
    get(t, e) { return this.send({ ...e, method: "GET", url: t }); }
    post(t, e) { return this.send({ ...e, method: "POST", url: t }); }
    delete(t, e) { return this.send({ ...e, method: "DELETE", url: t }); }
    getCookieString(t) { return ""; }
} !function (t) { t[t.Trace = 0] = "Trace", t[t.Debug = 1] = "Debug", t[t.Information = 2] = "Information", t[t.Warning = 3] = "Warning", t[t.Error = 4] = "Error", t[t.Critical = 5] = "Critical", t[t.None = 6] = "None"; }(e || (e = {})); class p {
    constructor() { }
    log(t, e) { }
} p.instance = new p; const f = "7.0.12"; class w {
    static isRequired(t, e) { if (null == t)
        throw new Error(`The '${e}' argument is required.`); }
    static isNotEmpty(t, e) { if (!t || t.match(/^\s*$/))
        throw new Error(`The '${e}' argument should not be empty.`); }
    static isIn(t, e, s) { if (!(t in e))
        throw new Error(`Unknown ${s} value: ${t}.`); }
} class g {
    static get isBrowser() { return "object" == typeof window && "object" == typeof window.document; }
    static get isWebWorker() { return "object" == typeof self && "importScripts" in self; }
    static get isReactNative() { return "object" == typeof window && void 0 === window.document; }
    static get isNode() { return !this.isBrowser && !this.isWebWorker && !this.isReactNative; }
} function m(t, e) { let s = ""; return y(t) ? (s = `Binary data of length ${t.byteLength}`, e && (s += `. Content: '${function (t) { const e = new Uint8Array(t); let s = ""; return e.forEach((t => { s += `0x${t < 16 ? "0" : ""}${t.toString(16)} `; })), s.substr(0, s.length - 1); }(t)}'`)) : "string" == typeof t && (s = `String data of length ${t.length}`, e && (s += `. Content: '${t}'`)), s; } function y(t) { return t && "undefined" != typeof ArrayBuffer && (t instanceof ArrayBuffer || t.constructor && "ArrayBuffer" === t.constructor.name); } async function b(t, s, i, n, r, o) { const h = {}, [c, a] = E(); h[c] = a, t.log(e.Trace, `(${s} transport) sending data. ${m(r, o.logMessageContent)}.`); const l = y(r) ? "arraybuffer" : "text", u = await i.post(n, { content: r, headers: { ...h, ...o.headers }, responseType: l, timeout: o.timeout, withCredentials: o.withCredentials }); t.log(e.Trace, `(${s} transport) request complete. Response status: ${u.statusCode}.`); } class v {
    constructor(t, e) { this.i = t, this.h = e; }
    dispose() { const t = this.i.observers.indexOf(this.h); t > -1 && this.i.observers.splice(t, 1), 0 === this.i.observers.length && this.i.cancelCallback && this.i.cancelCallback().catch((t => { })); }
} class $ {
    constructor(t) { this.l = t, this.out = console; }
    log(t, s) { if (t >= this.l) {
        const i = `[${(new Date).toISOString()}] ${e[t]}: ${s}`;
        switch (t) {
            case e.Critical:
            case e.Error:
                this.out.error(i);
                break;
            case e.Warning:
                this.out.warn(i);
                break;
            case e.Information:
                this.out.info(i);
                break;
            default: this.out.log(i);
        }
    } }
} function E() { let t = "X-SignalR-User-Agent"; return g.isNode && (t = "User-Agent"), [t, C(f, S(), g.isNode ? "NodeJS" : "Browser", k())]; } function C(t, e, s, i) { let n = "Microsoft SignalR/"; const r = t.split("."); return n += `${r[0]}.${r[1]}`, n += ` (${t}; `, n += e && "" !== e ? `${e}; ` : "Unknown OS; ", n += `${s}`, n += i ? `; ${i}` : "; Unknown Runtime Version", n += ")", n; } function S() { if (!g.isNode)
    return ""; switch (process.platform) {
    case "win32": return "Windows NT";
    case "darwin": return "macOS";
    case "linux": return "Linux";
    default: return process.platform;
} } function k() { if (g.isNode)
    return process.versions.node; } function P(t) { return t.stack ? t.stack : t.message ? t.message : `${t}`; } class T extends d {
    constructor(e) { if (super(), this.u = e, "undefined" == typeof fetch) {
        const t = require;
        this.p = new (t("tough-cookie").CookieJar), this.m = t("node-fetch"), this.m = t("fetch-cookie")(this.m, this.p);
    }
    else
        this.m = fetch.bind(function () { if ("undefined" != typeof globalThis)
            return globalThis; if ("undefined" != typeof self)
            return self; if ("undefined" != typeof window)
            return window; if (void 0 !== t.g)
            return t.g; throw new Error("could not find global"); }()); if ("undefined" == typeof AbortController) {
        const t = require;
        this.v = t("abort-controller");
    }
    else
        this.v = AbortController; }
    async send(t) { if (t.abortSignal && t.abortSignal.aborted)
        throw new r; if (!t.method)
        throw new Error("No method defined."); if (!t.url)
        throw new Error("No url defined."); const s = new this.v; let o; t.abortSignal && (t.abortSignal.onabort = () => { s.abort(), o = new r; }); let h, c = null; if (t.timeout) {
        const i = t.timeout;
        c = setTimeout((() => { s.abort(), this.u.log(e.Warning, "Timeout from HTTP request."), o = new n; }), i);
    } "" === t.content && (t.content = void 0), t.content && (t.headers = t.headers || {}, y(t.content) ? t.headers["Content-Type"] = "application/octet-stream" : t.headers["Content-Type"] = "text/plain;charset=UTF-8"); try {
        h = await this.m(t.url, { body: t.content, cache: "no-cache", credentials: !0 === t.withCredentials ? "include" : "same-origin", headers: { "X-Requested-With": "XMLHttpRequest", ...t.headers }, method: t.method, mode: "cors", redirect: "follow", signal: s.signal });
    }
    catch (t) {
        if (o)
            throw o;
        throw this.u.log(e.Warning, `Error from HTTP request. ${t}.`), t;
    }
    finally {
        c && clearTimeout(c), t.abortSignal && (t.abortSignal.onabort = null);
    } if (!h.ok) {
        const t = await I(h, "text");
        throw new i(t || h.statusText, h.status);
    } const a = I(h, t.responseType), l = await a; return new u(h.status, h.statusText, l); }
    getCookieString(t) { let e = ""; return g.isNode && this.p && this.p.getCookies(t, ((t, s) => e = s.join("; "))), e; }
} function I(t, e) { let s; switch (e) {
    case "arraybuffer":
        s = t.arrayBuffer();
        break;
    case "text":
    default:
        s = t.text();
        break;
    case "blob":
    case "document":
    case "json": throw new Error(`${e} is not supported.`);
} return s; } class _ extends d {
    constructor(t) { super(), this.u = t; }
    send(t) { return t.abortSignal && t.abortSignal.aborted ? Promise.reject(new r) : t.method ? t.url ? new Promise(((s, o) => { const h = new XMLHttpRequest; h.open(t.method, t.url, !0), h.withCredentials = void 0 === t.withCredentials || t.withCredentials, h.setRequestHeader("X-Requested-With", "XMLHttpRequest"), "" === t.content && (t.content = void 0), t.content && (y(t.content) ? h.setRequestHeader("Content-Type", "application/octet-stream") : h.setRequestHeader("Content-Type", "text/plain;charset=UTF-8")); const c = t.headers; c && Object.keys(c).forEach((t => { h.setRequestHeader(t, c[t]); })), t.responseType && (h.responseType = t.responseType), t.abortSignal && (t.abortSignal.onabort = () => { h.abort(), o(new r); }), t.timeout && (h.timeout = t.timeout), h.onload = () => { t.abortSignal && (t.abortSignal.onabort = null), h.status >= 200 && h.status < 300 ? s(new u(h.status, h.statusText, h.response || h.responseText)) : o(new i(h.response || h.responseText || h.statusText, h.status)); }, h.onerror = () => { this.u.log(e.Warning, `Error from HTTP request. ${h.status}: ${h.statusText}.`), o(new i(h.statusText, h.status)); }, h.ontimeout = () => { this.u.log(e.Warning, "Timeout from HTTP request."), o(new n); }, h.send(t.content); })) : Promise.reject(new Error("No url defined.")) : Promise.reject(new Error("No method defined.")); }
} class H extends d {
    constructor(t) { if (super(), "undefined" != typeof fetch || g.isNode)
        this.$ = new T(t);
    else {
        if ("undefined" == typeof XMLHttpRequest)
            throw new Error("No usable HttpClient found.");
        this.$ = new _(t);
    } }
    send(t) { return t.abortSignal && t.abortSignal.aborted ? Promise.reject(new r) : t.method ? t.url ? this.$.send(t) : Promise.reject(new Error("No url defined.")) : Promise.reject(new Error("No method defined.")); }
    getCookieString(t) { return this.$.getCookieString(t); }
} class D {
    static write(t) { return `${t}${D.RecordSeparator}`; }
    static parse(t) { if (t[t.length - 1] !== D.RecordSeparator)
        throw new Error("Message is incomplete."); const e = t.split(D.RecordSeparator); return e.pop(), e; }
} D.RecordSeparatorCode = 30, D.RecordSeparator = String.fromCharCode(D.RecordSeparatorCode); class x {
    writeHandshakeRequest(t) { return D.write(JSON.stringify(t)); }
    parseHandshakeResponse(t) { let e, s; if (y(t)) {
        const i = new Uint8Array(t), n = i.indexOf(D.RecordSeparatorCode);
        if (-1 === n)
            throw new Error("Message is incomplete.");
        const r = n + 1;
        e = String.fromCharCode.apply(null, Array.prototype.slice.call(i.slice(0, r))), s = i.byteLength > r ? i.slice(r).buffer : null;
    }
    else {
        const i = t, n = i.indexOf(D.RecordSeparator);
        if (-1 === n)
            throw new Error("Message is incomplete.");
        const r = n + 1;
        e = i.substring(0, r), s = i.length > r ? i.substring(r) : null;
    } const i = D.parse(e), n = JSON.parse(i[0]); if (n.type)
        throw new Error("Expected a handshake response from the server."); return [s, n]; }
} var R, A; !function (t) { t[t.Invocation = 1] = "Invocation", t[t.StreamItem = 2] = "StreamItem", t[t.Completion = 3] = "Completion", t[t.StreamInvocation = 4] = "StreamInvocation", t[t.CancelInvocation = 5] = "CancelInvocation", t[t.Ping = 6] = "Ping", t[t.Close = 7] = "Close"; }(R || (R = {})); class U {
    constructor() { this.observers = []; }
    next(t) { for (const e of this.observers)
        e.next(t); }
    error(t) { for (const e of this.observers)
        e.error && e.error(t); }
    complete() { for (const t of this.observers)
        t.complete && t.complete(); }
    subscribe(t) { return this.observers.push(t), new v(this, t); }
} !function (t) { t.Disconnected = "Disconnected", t.Connecting = "Connecting", t.Connected = "Connected", t.Disconnecting = "Disconnecting", t.Reconnecting = "Reconnecting"; }(A || (A = {})); class N {
    constructor(t, s, i, n) { this.C = 0, this.S = () => { this.u.log(e.Warning, "The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep"); }, w.isRequired(t, "connection"), w.isRequired(s, "logger"), w.isRequired(i, "protocol"), this.serverTimeoutInMilliseconds = 3e4, this.keepAliveIntervalInMilliseconds = 15e3, this.u = s, this.k = i, this.connection = t, this.P = n, this.T = new x, this.connection.onreceive = t => this.I(t), this.connection.onclose = t => this._(t), this.H = {}, this.D = {}, this.R = [], this.A = [], this.U = [], this.N = 0, this.L = !1, this.M = A.Disconnected, this.j = !1, this.q = this.k.writeMessage({ type: R.Ping }); }
    static create(t, e, s, i) { return new N(t, e, s, i); }
    get state() { return this.M; }
    get connectionId() { return this.connection && this.connection.connectionId || null; }
    get baseUrl() { return this.connection.baseUrl || ""; }
    set baseUrl(t) { if (this.M !== A.Disconnected && this.M !== A.Reconnecting)
        throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url."); if (!t)
        throw new Error("The HubConnection url must be a valid url."); this.connection.baseUrl = t; }
    start() { return this.W = this.O(), this.W; }
    async O() { if (this.M !== A.Disconnected)
        return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state.")); this.M = A.Connecting, this.u.log(e.Debug, "Starting HubConnection."); try {
        await this.F(), g.isBrowser && window.document.addEventListener("freeze", this.S), this.M = A.Connected, this.j = !0, this.u.log(e.Debug, "HubConnection connected successfully.");
    }
    catch (t) {
        return this.M = A.Disconnected, this.u.log(e.Debug, `HubConnection failed to start successfully because of error '${t}'.`), Promise.reject(t);
    } }
    async F() { this.B = void 0, this.L = !1; const t = new Promise(((t, e) => { this.X = t, this.J = e; })); await this.connection.start(this.k.transferFormat); try {
        const s = { protocol: this.k.name, version: this.k.version };
        if (this.u.log(e.Debug, "Sending handshake request."), await this.V(this.T.writeHandshakeRequest(s)), this.u.log(e.Information, `Using HubProtocol '${this.k.name}'.`), this.G(), this.K(), this.Y(), await t, this.B)
            throw this.B;
        this.connection.features.inherentKeepAlive || await this.V(this.q);
    }
    catch (t) {
        throw this.u.log(e.Debug, `Hub handshake failed with error '${t}' during start(). Stopping HubConnection.`), this.G(), this.Z(), await this.connection.stop(t), t;
    } }
    async stop() { const t = this.W; this.tt = this.et(), await this.tt; try {
        await t;
    }
    catch (t) { } }
    et(t) { return this.M === A.Disconnected ? (this.u.log(e.Debug, `Call to HubConnection.stop(${t}) ignored because it is already in the disconnected state.`), Promise.resolve()) : this.M === A.Disconnecting ? (this.u.log(e.Debug, `Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnecting state.`), this.tt) : (this.M = A.Disconnecting, this.u.log(e.Debug, "Stopping HubConnection."), this.st ? (this.u.log(e.Debug, "Connection stopped during reconnect delay. Done reconnecting."), clearTimeout(this.st), this.st = void 0, this.it(), Promise.resolve()) : (this.G(), this.Z(), this.B = t || new r("The connection was stopped before the hub handshake could complete."), this.connection.stop(t))); }
    stream(t, ...e) { const [s, i] = this.nt(e), n = this.rt(t, e, i); let r; const o = new U; return o.cancelCallback = () => { const t = this.ot(n.invocationId); return delete this.H[n.invocationId], r.then((() => this.ht(t))); }, this.H[n.invocationId] = (t, e) => { e ? o.error(e) : t && (t.type === R.Completion ? t.error ? o.error(new Error(t.error)) : o.complete() : o.next(t.item)); }, r = this.ht(n).catch((t => { o.error(t), delete this.H[n.invocationId]; })), this.ct(s, r), o; }
    V(t) { return this.Y(), this.connection.send(t); }
    ht(t) { return this.V(this.k.writeMessage(t)); }
    send(t, ...e) { const [s, i] = this.nt(e), n = this.ht(this.lt(t, e, !0, i)); return this.ct(s, n), n; }
    invoke(t, ...e) { const [s, i] = this.nt(e), n = this.lt(t, e, !1, i); return new Promise(((t, e) => { this.H[n.invocationId] = (s, i) => { i ? e(i) : s && (s.type === R.Completion ? s.error ? e(new Error(s.error)) : t(s.result) : e(new Error(`Unexpected message type: ${s.type}`))); }; const i = this.ht(n).catch((t => { e(t), delete this.H[n.invocationId]; })); this.ct(s, i); })); }
    on(t, e) { t && e && (t = t.toLowerCase(), this.D[t] || (this.D[t] = []), -1 === this.D[t].indexOf(e) && this.D[t].push(e)); }
    off(t, e) { if (!t)
        return; t = t.toLowerCase(); const s = this.D[t]; if (s)
        if (e) {
            const i = s.indexOf(e);
            -1 !== i && (s.splice(i, 1), 0 === s.length && delete this.D[t]);
        }
        else
            delete this.D[t]; }
    onclose(t) { t && this.R.push(t); }
    onreconnecting(t) { t && this.A.push(t); }
    onreconnected(t) { t && this.U.push(t); }
    I(t) { if (this.G(), this.L || (t = this.ut(t), this.L = !0), t) {
        const s = this.k.parseMessages(t, this.u);
        for (const t of s)
            switch (t.type) {
                case R.Invocation:
                    this.dt(t);
                    break;
                case R.StreamItem:
                case R.Completion: {
                    const s = this.H[t.invocationId];
                    if (s) {
                        t.type === R.Completion && delete this.H[t.invocationId];
                        try {
                            s(t);
                        }
                        catch (t) {
                            this.u.log(e.Error, `Stream callback threw error: ${P(t)}`);
                        }
                    }
                    break;
                }
                case R.Ping: break;
                case R.Close: {
                    this.u.log(e.Information, "Close message received from server.");
                    const s = t.error ? new Error("Server returned an error on close: " + t.error) : void 0;
                    !0 === t.allowReconnect ? this.connection.stop(s) : this.tt = this.et(s);
                    break;
                }
                default: this.u.log(e.Warning, `Invalid message type: ${t.type}.`);
            }
    } this.K(); }
    ut(t) { let s, i; try {
        [i, s] = this.T.parseHandshakeResponse(t);
    }
    catch (t) {
        const s = "Error parsing handshake response: " + t;
        this.u.log(e.Error, s);
        const i = new Error(s);
        throw this.J(i), i;
    } if (s.error) {
        const t = "Server returned handshake error: " + s.error;
        this.u.log(e.Error, t);
        const i = new Error(t);
        throw this.J(i), i;
    } return this.u.log(e.Debug, "Server handshake complete."), this.X(), i; }
    Y() { this.connection.features.inherentKeepAlive || (this.C = (new Date).getTime() + this.keepAliveIntervalInMilliseconds, this.Z()); }
    K() { if (!(this.connection.features && this.connection.features.inherentKeepAlive || (this.ft = setTimeout((() => this.serverTimeout()), this.serverTimeoutInMilliseconds), void 0 !== this.wt))) {
        let t = this.C - (new Date).getTime();
        t < 0 && (t = 0), this.wt = setTimeout((async () => { if (this.M === A.Connected)
            try {
                await this.V(this.q);
            }
            catch {
                this.Z();
            } }), t);
    } }
    serverTimeout() { this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server.")); }
    async dt(t) { const s = t.target.toLowerCase(), i = this.D[s]; if (!i)
        return this.u.log(e.Warning, `No client method with the name '${s}' found.`), void (t.invocationId && (this.u.log(e.Warning, `No result given for '${s}' method and invocation ID '${t.invocationId}'.`), await this.ht(this.gt(t.invocationId, "Client didn't provide a result.", null)))); const n = i.slice(), r = !!t.invocationId; let o, h, c; for (const i of n)
        try {
            const n = o;
            o = await i.apply(this, t.arguments), r && o && n && (this.u.log(e.Error, `Multiple results provided for '${s}'. Sending error to server.`), c = this.gt(t.invocationId, "Client provided multiple results.", null)), h = void 0;
        }
        catch (t) {
            h = t, this.u.log(e.Error, `A callback for the method '${s}' threw error '${t}'.`);
        } c ? await this.ht(c) : r ? (h ? c = this.gt(t.invocationId, `${h}`, null) : void 0 !== o ? c = this.gt(t.invocationId, null, o) : (this.u.log(e.Warning, `No result given for '${s}' method and invocation ID '${t.invocationId}'.`), c = this.gt(t.invocationId, "Client didn't provide a result.", null)), await this.ht(c)) : o && this.u.log(e.Error, `Result given for '${s}' method but server is not expecting a result.`); }
    _(t) { this.u.log(e.Debug, `HubConnection.connectionClosed(${t}) called while in state ${this.M}.`), this.B = this.B || t || new r("The underlying connection was closed before the hub handshake could complete."), this.X && this.X(), this.yt(t || new Error("Invocation canceled due to the underlying connection being closed.")), this.G(), this.Z(), this.M === A.Disconnecting ? this.it(t) : this.M === A.Connected && this.P ? this.bt(t) : this.M === A.Connected && this.it(t); }
    it(t) { if (this.j) {
        this.M = A.Disconnected, this.j = !1, g.isBrowser && window.document.removeEventListener("freeze", this.S);
        try {
            this.R.forEach((e => e.apply(this, [t])));
        }
        catch (s) {
            this.u.log(e.Error, `An onclose callback called with error '${t}' threw error '${s}'.`);
        }
    } }
    async bt(t) { const s = Date.now(); let i = 0, n = void 0 !== t ? t : new Error("Attempting to reconnect due to a unknown error."), r = this.vt(i++, 0, n); if (null === r)
        return this.u.log(e.Debug, "Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."), void this.it(t); if (this.M = A.Reconnecting, t ? this.u.log(e.Information, `Connection reconnecting because of error '${t}'.`) : this.u.log(e.Information, "Connection reconnecting."), 0 !== this.A.length) {
        try {
            this.A.forEach((e => e.apply(this, [t])));
        }
        catch (s) {
            this.u.log(e.Error, `An onreconnecting callback called with error '${t}' threw error '${s}'.`);
        }
        if (this.M !== A.Reconnecting)
            return void this.u.log(e.Debug, "Connection left the reconnecting state in onreconnecting callback. Done reconnecting.");
    } for (; null !== r;) {
        if (this.u.log(e.Information, `Reconnect attempt number ${i} will start in ${r} ms.`), await new Promise((t => { this.st = setTimeout(t, r); })), this.st = void 0, this.M !== A.Reconnecting)
            return void this.u.log(e.Debug, "Connection left the reconnecting state during reconnect delay. Done reconnecting.");
        try {
            if (await this.F(), this.M = A.Connected, this.u.log(e.Information, "HubConnection reconnected successfully."), 0 !== this.U.length)
                try {
                    this.U.forEach((t => t.apply(this, [this.connection.connectionId])));
                }
                catch (t) {
                    this.u.log(e.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${t}'.`);
                }
            return;
        }
        catch (t) {
            if (this.u.log(e.Information, `Reconnect attempt failed because of error '${t}'.`), this.M !== A.Reconnecting)
                return this.u.log(e.Debug, `Connection moved to the '${this.M}' from the reconnecting state during reconnect attempt. Done reconnecting.`), void (this.M === A.Disconnecting && this.it());
            n = t instanceof Error ? t : new Error(t.toString()), r = this.vt(i++, Date.now() - s, n);
        }
    } this.u.log(e.Information, `Reconnect retries have been exhausted after ${Date.now() - s} ms and ${i} failed attempts. Connection disconnecting.`), this.it(); }
    vt(t, s, i) { try {
        return this.P.nextRetryDelayInMilliseconds({ elapsedMilliseconds: s, previousRetryCount: t, retryReason: i });
    }
    catch (i) {
        return this.u.log(e.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${t}, ${s}) threw error '${i}'.`), null;
    } }
    yt(t) { const s = this.H; this.H = {}, Object.keys(s).forEach((i => { const n = s[i]; try {
        n(null, t);
    }
    catch (s) {
        this.u.log(e.Error, `Stream 'error' callback called with '${t}' threw error: ${P(s)}`);
    } })); }
    Z() { this.wt && (clearTimeout(this.wt), this.wt = void 0); }
    G() { this.ft && clearTimeout(this.ft); }
    lt(t, e, s, i) { if (s)
        return 0 !== i.length ? { arguments: e, streamIds: i, target: t, type: R.Invocation } : { arguments: e, target: t, type: R.Invocation }; {
        const s = this.N;
        return this.N++, 0 !== i.length ? { arguments: e, invocationId: s.toString(), streamIds: i, target: t, type: R.Invocation } : { arguments: e, invocationId: s.toString(), target: t, type: R.Invocation };
    } }
    ct(t, e) { if (0 !== t.length) {
        e || (e = Promise.resolve());
        for (const s in t)
            t[s].subscribe({ complete: () => { e = e.then((() => this.ht(this.gt(s)))); }, error: t => { let i; i = t instanceof Error ? t.message : t && t.toString ? t.toString() : "Unknown error", e = e.then((() => this.ht(this.gt(s, i)))); }, next: t => { e = e.then((() => this.ht(this.$t(s, t)))); } });
    } }
    nt(t) { const e = [], s = []; for (let i = 0; i < t.length; i++) {
        const n = t[i];
        if (this.Et(n)) {
            const r = this.N;
            this.N++, e[r] = n, s.push(r.toString()), t.splice(i, 1);
        }
    } return [e, s]; }
    Et(t) { return t && t.subscribe && "function" == typeof t.subscribe; }
    rt(t, e, s) { const i = this.N; return this.N++, 0 !== s.length ? { arguments: e, invocationId: i.toString(), streamIds: s, target: t, type: R.StreamInvocation } : { arguments: e, invocationId: i.toString(), target: t, type: R.StreamInvocation }; }
    ot(t) { return { invocationId: t, type: R.CancelInvocation }; }
    $t(t, e) { return { invocationId: t, item: e, type: R.StreamItem }; }
    gt(t, e, s) { return e ? { error: e, invocationId: t, type: R.Completion } : { invocationId: t, result: s, type: R.Completion }; }
} const L = [0, 2e3, 1e4, 3e4, null]; class M {
    constructor(t) { this.Ct = void 0 !== t ? [...t, null] : L; }
    nextRetryDelayInMilliseconds(t) { return this.Ct[t.previousRetryCount]; }
} class j {
} j.Authorization = "Authorization", j.Cookie = "Cookie"; class q extends d {
    constructor(t, e) { super(), this.St = t, this.kt = e; }
    async send(t) { let e = !0; this.kt && (!this.Pt || t.url && t.url.indexOf("/negotiate?") > 0) && (e = !1, this.Pt = await this.kt()), this.Tt(t); const s = await this.St.send(t); return e && 401 === s.statusCode && this.kt ? (this.Pt = await this.kt(), this.Tt(t), await this.St.send(t)) : s; }
    Tt(t) { t.headers || (t.headers = {}), this.Pt ? t.headers[j.Authorization] = `Bearer ${this.Pt}` : this.kt && t.headers[j.Authorization] && delete t.headers[j.Authorization]; }
    getCookieString(t) { return this.St.getCookieString(t); }
} var W, O; !function (t) { t[t.None = 0] = "None", t[t.WebSockets = 1] = "WebSockets", t[t.ServerSentEvents = 2] = "ServerSentEvents", t[t.LongPolling = 4] = "LongPolling"; }(W || (W = {})), function (t) { t[t.Text = 1] = "Text", t[t.Binary = 2] = "Binary"; }(O || (O = {})); class F {
    constructor() { this.It = !1, this.onabort = null; }
    abort() { this.It || (this.It = !0, this.onabort && this.onabort()); }
    get signal() { return this; }
    get aborted() { return this.It; }
} class B {
    constructor(t, e, s) { this.$ = t, this.u = e, this._t = new F, this.Ht = s, this.Dt = !1, this.onreceive = null, this.onclose = null; }
    get pollAborted() { return this._t.aborted; }
    async connect(t, s) { if (w.isRequired(t, "url"), w.isRequired(s, "transferFormat"), w.isIn(s, O, "transferFormat"), this.xt = t, this.u.log(e.Trace, "(LongPolling transport) Connecting."), s === O.Binary && "undefined" != typeof XMLHttpRequest && "string" != typeof (new XMLHttpRequest).responseType)
        throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported."); const [n, r] = E(), o = { [n]: r, ...this.Ht.headers }, h = { abortSignal: this._t.signal, headers: o, timeout: 1e5, withCredentials: this.Ht.withCredentials }; s === O.Binary && (h.responseType = "arraybuffer"); const c = `${t}&_=${Date.now()}`; this.u.log(e.Trace, `(LongPolling transport) polling: ${c}.`); const a = await this.$.get(c, h); 200 !== a.statusCode ? (this.u.log(e.Error, `(LongPolling transport) Unexpected response code: ${a.statusCode}.`), this.Rt = new i(a.statusText || "", a.statusCode), this.Dt = !1) : this.Dt = !0, this.At = this.Ut(this.xt, h); }
    async Ut(t, s) { try {
        for (; this.Dt;)
            try {
                const n = `${t}&_=${Date.now()}`;
                this.u.log(e.Trace, `(LongPolling transport) polling: ${n}.`);
                const r = await this.$.get(n, s);
                204 === r.statusCode ? (this.u.log(e.Information, "(LongPolling transport) Poll terminated by server."), this.Dt = !1) : 200 !== r.statusCode ? (this.u.log(e.Error, `(LongPolling transport) Unexpected response code: ${r.statusCode}.`), this.Rt = new i(r.statusText || "", r.statusCode), this.Dt = !1) : r.content ? (this.u.log(e.Trace, `(LongPolling transport) data received. ${m(r.content, this.Ht.logMessageContent)}.`), this.onreceive && this.onreceive(r.content)) : this.u.log(e.Trace, "(LongPolling transport) Poll timed out, reissuing.");
            }
            catch (t) {
                this.Dt ? t instanceof n ? this.u.log(e.Trace, "(LongPolling transport) Poll timed out, reissuing.") : (this.Rt = t, this.Dt = !1) : this.u.log(e.Trace, `(LongPolling transport) Poll errored after shutdown: ${t.message}`);
            }
    }
    finally {
        this.u.log(e.Trace, "(LongPolling transport) Polling complete."), this.pollAborted || this.Nt();
    } }
    async send(t) { return this.Dt ? b(this.u, "LongPolling", this.$, this.xt, t, this.Ht) : Promise.reject(new Error("Cannot send until the transport is connected")); }
    async stop() { this.u.log(e.Trace, "(LongPolling transport) Stopping polling."), this.Dt = !1, this._t.abort(); try {
        await this.At, this.u.log(e.Trace, `(LongPolling transport) sending DELETE request to ${this.xt}.`);
        const t = {}, [s, i] = E();
        t[s] = i;
        const n = { headers: { ...t, ...this.Ht.headers }, timeout: this.Ht.timeout, withCredentials: this.Ht.withCredentials };
        await this.$.delete(this.xt, n), this.u.log(e.Trace, "(LongPolling transport) DELETE request sent.");
    }
    finally {
        this.u.log(e.Trace, "(LongPolling transport) Stop finished."), this.Nt();
    } }
    Nt() { if (this.onclose) {
        let t = "(LongPolling transport) Firing onclose event.";
        this.Rt && (t += " Error: " + this.Rt), this.u.log(e.Trace, t), this.onclose(this.Rt);
    } }
} class X {
    constructor(t, e, s, i) { this.$ = t, this.Pt = e, this.u = s, this.Ht = i, this.onreceive = null, this.onclose = null; }
    async connect(t, s) { return w.isRequired(t, "url"), w.isRequired(s, "transferFormat"), w.isIn(s, O, "transferFormat"), this.u.log(e.Trace, "(SSE transport) Connecting."), this.xt = t, this.Pt && (t += (t.indexOf("?") < 0 ? "?" : "&") + `access_token=${encodeURIComponent(this.Pt)}`), new Promise(((i, n) => { let r, o = !1; if (s === O.Text) {
        if (g.isBrowser || g.isWebWorker)
            r = new this.Ht.EventSource(t, { withCredentials: this.Ht.withCredentials });
        else {
            const e = this.$.getCookieString(t), s = {};
            s.Cookie = e;
            const [i, n] = E();
            s[i] = n, r = new this.Ht.EventSource(t, { withCredentials: this.Ht.withCredentials, headers: { ...s, ...this.Ht.headers } });
        }
        try {
            r.onmessage = t => { if (this.onreceive)
                try {
                    this.u.log(e.Trace, `(SSE transport) data received. ${m(t.data, this.Ht.logMessageContent)}.`), this.onreceive(t.data);
                }
                catch (t) {
                    return void this.Lt(t);
                } }, r.onerror = t => { o ? this.Lt() : n(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled.")); }, r.onopen = () => { this.u.log(e.Information, `SSE connected to ${this.xt}`), this.Mt = r, o = !0, i(); };
        }
        catch (t) {
            return void n(t);
        }
    }
    else
        n(new Error("The Server-Sent Events transport only supports the 'Text' transfer format")); })); }
    async send(t) { return this.Mt ? b(this.u, "SSE", this.$, this.xt, t, this.Ht) : Promise.reject(new Error("Cannot send until the transport is connected")); }
    stop() { return this.Lt(), Promise.resolve(); }
    Lt(t) { this.Mt && (this.Mt.close(), this.Mt = void 0, this.onclose && this.onclose(t)); }
} class J {
    constructor(t, e, s, i, n, r) { this.u = s, this.kt = e, this.jt = i, this.qt = n, this.$ = t, this.onreceive = null, this.onclose = null, this.Wt = r; }
    async connect(t, s) { let i; return w.isRequired(t, "url"), w.isRequired(s, "transferFormat"), w.isIn(s, O, "transferFormat"), this.u.log(e.Trace, "(WebSockets transport) Connecting."), this.kt && (i = await this.kt()), new Promise(((n, r) => { let o; t = t.replace(/^http/, "ws"); const h = this.$.getCookieString(t); let c = !1; if (g.isNode || g.isReactNative) {
        const e = {}, [s, n] = E();
        e[s] = n, i && (e[j.Authorization] = `Bearer ${i}`), h && (e[j.Cookie] = h), o = new this.qt(t, void 0, { headers: { ...e, ...this.Wt } });
    }
    else
        i && (t += (t.indexOf("?") < 0 ? "?" : "&") + `access_token=${encodeURIComponent(i)}`); o || (o = new this.qt(t)), s === O.Binary && (o.binaryType = "arraybuffer"), o.onopen = s => { this.u.log(e.Information, `WebSocket connected to ${t}.`), this.Ot = o, c = !0, n(); }, o.onerror = t => { let s = null; s = "undefined" != typeof ErrorEvent && t instanceof ErrorEvent ? t.error : "There was an error with the transport", this.u.log(e.Information, `(WebSockets transport) ${s}.`); }, o.onmessage = t => { if (this.u.log(e.Trace, `(WebSockets transport) data received. ${m(t.data, this.jt)}.`), this.onreceive)
        try {
            this.onreceive(t.data);
        }
        catch (t) {
            return void this.Lt(t);
        } }, o.onclose = t => { if (c)
        this.Lt(t);
    else {
        let e = null;
        e = "undefined" != typeof ErrorEvent && t instanceof ErrorEvent ? t.error : "WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.", r(new Error(e));
    } }; })); }
    send(t) { return this.Ot && this.Ot.readyState === this.qt.OPEN ? (this.u.log(e.Trace, `(WebSockets transport) sending data. ${m(t, this.jt)}.`), this.Ot.send(t), Promise.resolve()) : Promise.reject("WebSocket is not in the OPEN state"); }
    stop() { return this.Ot && this.Lt(void 0), Promise.resolve(); }
    Lt(t) { this.Ot && (this.Ot.onclose = () => { }, this.Ot.onmessage = () => { }, this.Ot.onerror = () => { }, this.Ot.close(), this.Ot = void 0), this.u.log(e.Trace, "(WebSockets transport) socket closed."), this.onclose && (!this.Ft(t) || !1 !== t.wasClean && 1e3 === t.code ? t instanceof Error ? this.onclose(t) : this.onclose() : this.onclose(new Error(`WebSocket closed with status code: ${t.code} (${t.reason || "no reason given"}).`))); }
    Ft(t) { return t && "boolean" == typeof t.wasClean && "number" == typeof t.code; }
} class z {
    constructor(t, s = {}) { var i; if (this.Bt = () => { }, this.features = {}, this.Xt = 1, w.isRequired(t, "url"), this.u = void 0 === (i = s.logger) ? new $(e.Information) : null === i ? p.instance : void 0 !== i.log ? i : new $(i), this.baseUrl = this.Jt(t), (s = s || {}).logMessageContent = void 0 !== s.logMessageContent && s.logMessageContent, "boolean" != typeof s.withCredentials && void 0 !== s.withCredentials)
        throw new Error("withCredentials option was not a 'boolean' or 'undefined' value"); s.withCredentials = void 0 === s.withCredentials || s.withCredentials, s.timeout = void 0 === s.timeout ? 1e5 : s.timeout; let n = null, r = null; if (g.isNode) {
        const t = require;
        n = t("ws"), r = t("eventsource");
    } g.isNode || "undefined" == typeof WebSocket || s.WebSocket ? g.isNode && !s.WebSocket && n && (s.WebSocket = n) : s.WebSocket = WebSocket, g.isNode || "undefined" == typeof EventSource || s.EventSource ? g.isNode && !s.EventSource && void 0 !== r && (s.EventSource = r) : s.EventSource = EventSource, this.$ = new q(s.httpClient || new H(this.u), s.accessTokenFactory), this.M = "Disconnected", this.j = !1, this.Ht = s, this.onreceive = null, this.onclose = null; }
    async start(t) { if (t = t || O.Binary, w.isIn(t, O, "transferFormat"), this.u.log(e.Debug, `Starting connection with transfer format '${O[t]}'.`), "Disconnected" !== this.M)
        return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state.")); if (this.M = "Connecting", this.zt = this.F(t), await this.zt, "Disconnecting" === this.M) {
        const t = "Failed to start the HttpConnection before stop() was called.";
        return this.u.log(e.Error, t), await this.tt, Promise.reject(new r(t));
    } if ("Connected" !== this.M) {
        const t = "HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";
        return this.u.log(e.Error, t), Promise.reject(new r(t));
    } this.j = !0; }
    send(t) { return "Connected" !== this.M ? Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")) : (this.Vt || (this.Vt = new V(this.transport)), this.Vt.send(t)); }
    async stop(t) { return "Disconnected" === this.M ? (this.u.log(e.Debug, `Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnected state.`), Promise.resolve()) : "Disconnecting" === this.M ? (this.u.log(e.Debug, `Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnecting state.`), this.tt) : (this.M = "Disconnecting", this.tt = new Promise((t => { this.Bt = t; })), await this.et(t), void await this.tt); }
    async et(t) { this.Gt = t; try {
        await this.zt;
    }
    catch (t) { } if (this.transport) {
        try {
            await this.transport.stop();
        }
        catch (t) {
            this.u.log(e.Error, `HttpConnection.transport.stop() threw error '${t}'.`), this.Kt();
        }
        this.transport = void 0;
    }
    else
        this.u.log(e.Debug, "HttpConnection.transport is undefined in HttpConnection.stop() because start() failed."); }
    async F(t) { let s = this.baseUrl; this.kt = this.Ht.accessTokenFactory, this.$.kt = this.kt; try {
        if (this.Ht.skipNegotiation) {
            if (this.Ht.transport !== W.WebSockets)
                throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");
            this.transport = this.Qt(W.WebSockets), await this.Yt(s, t);
        }
        else {
            let e = null, i = 0;
            do {
                if (e = await this.Zt(s), "Disconnecting" === this.M || "Disconnected" === this.M)
                    throw new r("The connection was stopped during negotiation.");
                if (e.error)
                    throw new Error(e.error);
                if (e.ProtocolVersion)
                    throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");
                if (e.url && (s = e.url), e.accessToken) {
                    const t = e.accessToken;
                    this.kt = () => t, this.$.Pt = t, this.$.kt = void 0;
                }
                i++;
            } while (e.url && i < 100);
            if (100 === i && e.url)
                throw new Error("Negotiate redirection limit exceeded.");
            await this.te(s, this.Ht.transport, e, t);
        }
        this.transport instanceof B && (this.features.inherentKeepAlive = !0), "Connecting" === this.M && (this.u.log(e.Debug, "The HttpConnection connected successfully."), this.M = "Connected");
    }
    catch (t) {
        return this.u.log(e.Error, "Failed to start the connection: " + t), this.M = "Disconnected", this.transport = void 0, this.Bt(), Promise.reject(t);
    } }
    async Zt(t) { const s = {}, [n, r] = E(); s[n] = r; const o = this.ee(t); this.u.log(e.Debug, `Sending negotiation request: ${o}.`); try {
        const t = await this.$.post(o, { content: "", headers: { ...s, ...this.Ht.headers }, timeout: this.Ht.timeout, withCredentials: this.Ht.withCredentials });
        if (200 !== t.statusCode)
            return Promise.reject(new Error(`Unexpected status code returned from negotiate '${t.statusCode}'`));
        const e = JSON.parse(t.content);
        return (!e.negotiateVersion || e.negotiateVersion < 1) && (e.connectionToken = e.connectionId), e;
    }
    catch (t) {
        let s = "Failed to complete negotiation with the server: " + t;
        return t instanceof i && 404 === t.statusCode && (s += " Either this is not a SignalR endpoint or there is a proxy blocking the connection."), this.u.log(e.Error, s), Promise.reject(new a(s));
    } }
    se(t, e) { return e ? t + (-1 === t.indexOf("?") ? "?" : "&") + `id=${e}` : t; }
    async te(t, s, i, n) { let o = this.se(t, i.connectionToken); if (this.ie(s))
        return this.u.log(e.Debug, "Connection was provided an instance of ITransport, using that directly."), this.transport = s, await this.Yt(o, n), void (this.connectionId = i.connectionId); const h = [], a = i.availableTransports || []; let u = i; for (const i of a) {
        const a = this.ne(i, s, n);
        if (a instanceof Error)
            h.push(`${i.transport} failed:`), h.push(a);
        else if (this.ie(a)) {
            if (this.transport = a, !u) {
                try {
                    u = await this.Zt(t);
                }
                catch (t) {
                    return Promise.reject(t);
                }
                o = this.se(t, u.connectionToken);
            }
            try {
                return await this.Yt(o, n), void (this.connectionId = u.connectionId);
            }
            catch (t) {
                if (this.u.log(e.Error, `Failed to start the transport '${i.transport}': ${t}`), u = void 0, h.push(new c(`${i.transport} failed: ${t}`, W[i.transport])), "Connecting" !== this.M) {
                    const t = "Failed to select transport before stop() was called.";
                    return this.u.log(e.Debug, t), Promise.reject(new r(t));
                }
            }
        }
    } return h.length > 0 ? Promise.reject(new l(`Unable to connect to the server with any of the available transports. ${h.join(" ")}`, h)) : Promise.reject(new Error("None of the transports supported by the client are supported by the server.")); }
    Qt(t) { switch (t) {
        case W.WebSockets:
            if (!this.Ht.WebSocket)
                throw new Error("'WebSocket' is not supported in your environment.");
            return new J(this.$, this.kt, this.u, this.Ht.logMessageContent, this.Ht.WebSocket, this.Ht.headers || {});
        case W.ServerSentEvents:
            if (!this.Ht.EventSource)
                throw new Error("'EventSource' is not supported in your environment.");
            return new X(this.$, this.$.Pt, this.u, this.Ht);
        case W.LongPolling: return new B(this.$, this.u, this.Ht);
        default: throw new Error(`Unknown transport: ${t}.`);
    } }
    Yt(t, e) { return this.transport.onreceive = this.onreceive, this.transport.onclose = t => this.Kt(t), this.transport.connect(t, e); }
    ne(t, s, i) { const n = W[t.transport]; if (null == n)
        return this.u.log(e.Debug, `Skipping transport '${t.transport}' because it is not supported by this client.`), new Error(`Skipping transport '${t.transport}' because it is not supported by this client.`); if (!function (t, e) { return !t || 0 != (e & t); }(s, n))
        return this.u.log(e.Debug, `Skipping transport '${W[n]}' because it was disabled by the client.`), new h(`'${W[n]}' is disabled by the client.`, n); if (!(t.transferFormats.map((t => O[t])).indexOf(i) >= 0))
        return this.u.log(e.Debug, `Skipping transport '${W[n]}' because it does not support the requested transfer format '${O[i]}'.`), new Error(`'${W[n]}' does not support ${O[i]}.`); if (n === W.WebSockets && !this.Ht.WebSocket || n === W.ServerSentEvents && !this.Ht.EventSource)
        return this.u.log(e.Debug, `Skipping transport '${W[n]}' because it is not supported in your environment.'`), new o(`'${W[n]}' is not supported in your environment.`, n); this.u.log(e.Debug, `Selecting transport '${W[n]}'.`); try {
        return this.Qt(n);
    }
    catch (t) {
        return t;
    } }
    ie(t) { return t && "object" == typeof t && "connect" in t; }
    Kt(t) { if (this.u.log(e.Debug, `HttpConnection.stopConnection(${t}) called while in state ${this.M}.`), this.transport = void 0, t = this.Gt || t, this.Gt = void 0, "Disconnected" !== this.M) {
        if ("Connecting" === this.M)
            throw this.u.log(e.Warning, `Call to HttpConnection.stopConnection(${t}) was ignored because the connection is still in the connecting state.`), new Error(`HttpConnection.stopConnection(${t}) was called while the connection is still in the connecting state.`);
        if ("Disconnecting" === this.M && this.Bt(), t ? this.u.log(e.Error, `Connection disconnected with error '${t}'.`) : this.u.log(e.Information, "Connection disconnected."), this.Vt && (this.Vt.stop().catch((t => { this.u.log(e.Error, `TransportSendQueue.stop() threw error '${t}'.`); })), this.Vt = void 0), this.connectionId = void 0, this.M = "Disconnected", this.j) {
            this.j = !1;
            try {
                this.onclose && this.onclose(t);
            }
            catch (s) {
                this.u.log(e.Error, `HttpConnection.onclose(${t}) threw error '${s}'.`);
            }
        }
    }
    else
        this.u.log(e.Debug, `Call to HttpConnection.stopConnection(${t}) was ignored because the connection is already in the disconnected state.`); }
    Jt(t) { if (0 === t.lastIndexOf("https://", 0) || 0 === t.lastIndexOf("http://", 0))
        return t; if (!g.isBrowser)
        throw new Error(`Cannot resolve '${t}'.`); const s = window.document.createElement("a"); return s.href = t, this.u.log(e.Information, `Normalizing '${t}' to '${s.href}'.`), s.href; }
    ee(t) { const e = t.indexOf("?"); let s = t.substring(0, -1 === e ? t.length : e); return "/" !== s[s.length - 1] && (s += "/"), s += "negotiate", s += -1 === e ? "" : t.substring(e), -1 === s.indexOf("negotiateVersion") && (s += -1 === e ? "?" : "&", s += "negotiateVersion=" + this.Xt), s; }
} class V {
    constructor(t) { this.re = t, this.oe = [], this.he = !0, this.ce = new G, this.ae = new G, this.le = this.ue(); }
    send(t) { return this.de(t), this.ae || (this.ae = new G), this.ae.promise; }
    stop() { return this.he = !1, this.ce.resolve(), this.le; }
    de(t) { if (this.oe.length && typeof this.oe[0] != typeof t)
        throw new Error(`Expected data to be of type ${typeof this.oe} but was of type ${typeof t}`); this.oe.push(t), this.ce.resolve(); }
    async ue() { for (;;) {
        if (await this.ce.promise, !this.he) {
            this.ae && this.ae.reject("Connection stopped.");
            break;
        }
        this.ce = new G;
        const t = this.ae;
        this.ae = void 0;
        const e = "string" == typeof this.oe[0] ? this.oe.join("") : V.pe(this.oe);
        this.oe.length = 0;
        try {
            await this.re.send(e), t.resolve();
        }
        catch (e) {
            t.reject(e);
        }
    } }
    static pe(t) { const e = t.map((t => t.byteLength)).reduce(((t, e) => t + e)), s = new Uint8Array(e); let i = 0; for (const e of t)
        s.set(new Uint8Array(e), i), i += e.byteLength; return s.buffer; }
} class G {
    constructor() { this.promise = new Promise(((t, e) => [this.fe, this.we] = [t, e])); }
    resolve() { this.fe(); }
    reject(t) { this.we(t); }
} class K {
    constructor() { this.name = "json", this.version = 1, this.transferFormat = O.Text; }
    parseMessages(t, s) { if ("string" != typeof t)
        throw new Error("Invalid input for JSON hub protocol. Expected a string."); if (!t)
        return []; null === s && (s = p.instance); const i = D.parse(t), n = []; for (const t of i) {
        const i = JSON.parse(t);
        if ("number" != typeof i.type)
            throw new Error("Invalid payload.");
        switch (i.type) {
            case R.Invocation:
                this.ge(i);
                break;
            case R.StreamItem:
                this.me(i);
                break;
            case R.Completion:
                this.ye(i);
                break;
            case R.Ping:
            case R.Close: break;
            default:
                s.log(e.Information, "Unknown message type '" + i.type + "' ignored.");
                continue;
        }
        n.push(i);
    } return n; }
    writeMessage(t) { return D.write(JSON.stringify(t)); }
    ge(t) { this.be(t.target, "Invalid payload for Invocation message."), void 0 !== t.invocationId && this.be(t.invocationId, "Invalid payload for Invocation message."); }
    me(t) { if (this.be(t.invocationId, "Invalid payload for StreamItem message."), void 0 === t.item)
        throw new Error("Invalid payload for StreamItem message."); }
    ye(t) { if (t.result && t.error)
        throw new Error("Invalid payload for Completion message."); !t.result && t.error && this.be(t.error, "Invalid payload for Completion message."), this.be(t.invocationId, "Invalid payload for Completion message."); }
    be(t, e) { if ("string" != typeof t || "" === t)
        throw new Error(e); }
} const Q = { trace: e.Trace, debug: e.Debug, info: e.Information, information: e.Information, warn: e.Warning, warning: e.Warning, error: e.Error, critical: e.Critical, none: e.None }; class Y {
    configureLogging(t) { if (w.isRequired(t, "logging"), void 0 !== t.log)
        this.logger = t;
    else if ("string" == typeof t) {
        const e = function (t) { const e = Q[t.toLowerCase()]; if (void 0 !== e)
            return e; throw new Error(`Unknown log level: ${t}`); }(t);
        this.logger = new $(e);
    }
    else
        this.logger = new $(t); return this; }
    withUrl(t, e) { return w.isRequired(t, "url"), w.isNotEmpty(t, "url"), this.url = t, this.httpConnectionOptions = "object" == typeof e ? { ...this.httpConnectionOptions, ...e } : { ...this.httpConnectionOptions, transport: e }, this; }
    withHubProtocol(t) { return w.isRequired(t, "protocol"), this.protocol = t, this; }
    withAutomaticReconnect(t) { if (this.reconnectPolicy)
        throw new Error("A reconnectPolicy has already been set."); return t ? Array.isArray(t) ? this.reconnectPolicy = new M(t) : this.reconnectPolicy = t : this.reconnectPolicy = new M, this; }
    build() { const t = this.httpConnectionOptions || {}; if (void 0 === t.logger && (t.logger = this.logger), !this.url)
        throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection."); const e = new z(this.url, t); return N.create(e, this.logger || p.instance, this.protocol || new K, this.reconnectPolicy); }
} return Uint8Array.prototype.indexOf || Object.defineProperty(Uint8Array.prototype, "indexOf", { value: Array.prototype.indexOf, writable: !0 }), Uint8Array.prototype.slice || Object.defineProperty(Uint8Array.prototype, "slice", { value: function (t, e) { return new Uint8Array(Array.prototype.slice.call(this, t, e)); }, writable: !0 }), Uint8Array.prototype.forEach || Object.defineProperty(Uint8Array.prototype, "forEach", { value: Array.prototype.forEach, writable: !0 }), s; })(), "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.signalR = e() : t.signalR = e();
export {};
//# sourceMappingURL=signalr.min.js.map
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmFsci5tanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9QYWNrYWdlcy9Uc1Byb2ovc3JjL3NpZ25hbHIubWpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQztBQUFBLENBQUMsR0FBQyxJQUFJLEVBQUMsQ0FBQyxHQUFDLEdBQUUsRUFBRSxDQUFBLENBQUMsR0FBRSxFQUFFLEdBQUMsSUFBSSxDQUFDLEdBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsR0FBQyxLQUFJLElBQUksQ0FBQyxJQUFJLENBQUM7UUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFDLFVBQVUsRUFBQyxDQUFDLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsRUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsR0FBQyxjQUFXLElBQUcsUUFBUSxJQUFFLE9BQU8sVUFBVTtJQUFDLE9BQU8sVUFBVSxDQUFDLENBQUEsSUFBRztJQUFDLE9BQU8sSUFBSSxJQUFFLElBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUE7Q0FBQztBQUFBLE9BQU0sQ0FBQyxFQUFDO0lBQUMsSUFBRyxRQUFRLElBQUUsT0FBTyxNQUFNO1FBQUMsT0FBTyxNQUFNLENBQUE7Q0FBQyxDQUFBLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEVBQUUsR0FBQyxXQUFXLElBQUUsT0FBTyxNQUFNLElBQUUsTUFBTSxDQUFDLFdBQVcsSUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBQyxNQUFNLENBQUMsV0FBVyxFQUFDLEVBQUMsS0FBSyxFQUFDLFFBQVEsRUFBQyxDQUFDLEVBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxFQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFBLElBQUksQ0FBQyxFQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsVUFBVSxFQUFDLEdBQUUsRUFBRSxDQUFBLENBQUMsRUFBQyxpQkFBaUIsRUFBQyxHQUFFLEVBQUUsQ0FBQSxDQUFDLEVBQUMsVUFBVSxFQUFDLEdBQUUsRUFBRSxDQUFBLENBQUMsRUFBQyxTQUFTLEVBQUMsR0FBRSxFQUFFLENBQUEsQ0FBQyxFQUFDLFlBQVksRUFBQyxHQUFFLEVBQUUsQ0FBQSxDQUFDLEVBQUMsaUJBQWlCLEVBQUMsR0FBRSxFQUFFLENBQUEsQ0FBQyxFQUFDLGFBQWEsRUFBQyxHQUFFLEVBQUUsQ0FBQSxDQUFDLEVBQUMsb0JBQW9CLEVBQUMsR0FBRSxFQUFFLENBQUEsQ0FBQyxFQUFDLGtCQUFrQixFQUFDLEdBQUUsRUFBRSxDQUFBLENBQUMsRUFBQyxlQUFlLEVBQUMsR0FBRSxFQUFFLENBQUEsQ0FBQyxFQUFDLFFBQVEsRUFBQyxHQUFFLEVBQUUsQ0FBQSxDQUFDLEVBQUMsV0FBVyxFQUFDLEdBQUUsRUFBRSxDQUFBLENBQUMsRUFBQyxVQUFVLEVBQUMsR0FBRSxFQUFFLENBQUEsQ0FBQyxFQUFDLE9BQU8sRUFBQyxHQUFFLEVBQUUsQ0FBQSxDQUFDLEVBQUMsWUFBWSxFQUFDLEdBQUUsRUFBRSxDQUFBLENBQUMsRUFBQyxjQUFjLEVBQUMsR0FBRSxFQUFFLENBQUEsQ0FBQyxFQUFDLE9BQU8sRUFBQyxHQUFFLEVBQUUsQ0FBQSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsTUFBTSxDQUFFLFNBQVEsS0FBSztJQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsSUFBRSxNQUFNLENBQUMsR0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBLEtBQUssQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0NBQUMsQ0FBQSxNQUFNLENBQUUsU0FBUSxLQUFLO0lBQUMsWUFBWSxDQUFDLEdBQUMscUJBQXFCLElBQUUsTUFBTSxDQUFDLEdBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0NBQUMsQ0FBQSxNQUFNLENBQUUsU0FBUSxLQUFLO0lBQUMsWUFBWSxDQUFDLEdBQUMsb0JBQW9CLElBQUUsTUFBTSxDQUFDLEdBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0NBQUMsQ0FBQSxNQUFNLENBQUUsU0FBUSxLQUFLO0lBQUMsWUFBWSxDQUFDLEVBQUMsQ0FBQyxJQUFFLE1BQU0sQ0FBQyxHQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUEsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsMkJBQTJCLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0NBQUMsQ0FBQSxNQUFNLENBQUUsU0FBUSxLQUFLO0lBQUMsWUFBWSxDQUFDLEVBQUMsQ0FBQyxJQUFFLE1BQU0sQ0FBQyxHQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUEsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsd0JBQXdCLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0NBQUMsQ0FBQSxNQUFNLENBQUUsU0FBUSxLQUFLO0lBQUMsWUFBWSxDQUFDLEVBQUMsQ0FBQyxJQUFFLE1BQU0sQ0FBQyxHQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUEsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsNkJBQTZCLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0NBQUMsQ0FBQSxNQUFNLENBQUUsU0FBUSxLQUFLO0lBQUMsWUFBWSxDQUFDLElBQUUsTUFBTSxDQUFDLEdBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxrQ0FBa0MsRUFBQyxJQUFJLENBQUMsU0FBUyxHQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7Q0FBQyxDQUFBLE1BQU0sQ0FBRSxTQUFRLEtBQUs7SUFBQyxZQUFZLENBQUMsRUFBQyxDQUFDLElBQUUsTUFBTSxDQUFDLEdBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFdBQVcsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0NBQUMsQ0FBQSxNQUFNLENBQUM7SUFBQyxZQUFZLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxVQUFVLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxVQUFVLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztDQUFDLENBQUEsTUFBTSxDQUFDO0lBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsTUFBTSxFQUFDLEtBQUssRUFBQyxHQUFHLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLE1BQU0sRUFBQyxRQUFRLEVBQUMsR0FBRyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsZUFBZSxDQUFDLENBQUMsSUFBRSxPQUFNLEVBQUUsQ0FBQSxDQUFBLENBQUM7Q0FBQyxDQUFBLENBQUMsVUFBUyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLEdBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxHQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBQyxDQUFDLENBQUMsR0FBQyxhQUFhLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxDQUFDLEdBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxHQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUMsR0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLEdBQUMsTUFBTSxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsTUFBTSxDQUFDO0lBQUMsZ0JBQWMsQ0FBQztJQUFBLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUM7Q0FBQyxDQUFBLENBQUMsQ0FBQyxRQUFRLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQSxNQUFNLENBQUMsR0FBQyxRQUFRLENBQUMsQ0FBQSxNQUFNLENBQUM7SUFBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsSUFBRyxJQUFJLElBQUUsQ0FBQztRQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLElBQUcsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFBQyxNQUFNLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsSUFBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFBLENBQUM7Q0FBQyxDQUFBLE1BQU0sQ0FBQztJQUFDLE1BQU0sS0FBSyxTQUFTLEtBQUcsT0FBTSxRQUFRLElBQUUsT0FBTyxNQUFNLElBQUUsUUFBUSxJQUFFLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQSxDQUFBLENBQUM7SUFBQSxNQUFNLEtBQUssV0FBVyxLQUFHLE9BQU0sUUFBUSxJQUFFLE9BQU8sSUFBSSxJQUFFLGVBQWUsSUFBRyxJQUFJLENBQUEsQ0FBQSxDQUFDO0lBQUEsTUFBTSxLQUFLLGFBQWEsS0FBRyxPQUFNLFFBQVEsSUFBRSxPQUFPLE1BQU0sSUFBRSxLQUFLLENBQUMsS0FBRyxNQUFNLENBQUMsUUFBUSxDQUFBLENBQUEsQ0FBQztJQUFBLE1BQU0sS0FBSyxNQUFNLEtBQUcsT0FBTSxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQSxDQUFBLENBQUM7Q0FBQyxDQUFBLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsSUFBSSxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxHQUFDLHlCQUF5QixDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFFLGVBQWUsVUFBUyxDQUFDLElBQUUsTUFBTSxDQUFDLEdBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUEsRUFBRSxHQUFDLENBQUMsSUFBRSxLQUFLLENBQUMsR0FBQyxFQUFFLENBQUEsQ0FBQyxDQUFBLEdBQUcsQ0FBQSxDQUFDLENBQUEsRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsUUFBUSxJQUFFLE9BQU8sQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFDLHlCQUF5QixDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFFLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQSxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUUsT0FBTyxDQUFDLElBQUUsV0FBVyxJQUFFLE9BQU8sV0FBVyxJQUFFLENBQUMsQ0FBQyxZQUFZLFdBQVcsSUFBRSxDQUFDLENBQUMsV0FBVyxJQUFFLGFBQWEsS0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFBLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsTUFBTSxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsYUFBYSxDQUFBLENBQUMsQ0FBQSxNQUFNLEVBQUMsQ0FBQyxHQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBQyxFQUFDLFlBQVksRUFBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsZUFBZSxFQUFDLENBQUMsQ0FBQyxlQUFlLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLElBQUksQ0FBQyxrREFBa0QsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUEsTUFBTSxDQUFDO0lBQUMsWUFBWSxDQUFDLEVBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLE9BQU8sS0FBRyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQSxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7Q0FBQyxDQUFBLE1BQU0sQ0FBQztJQUFDLFlBQVksQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLEdBQUMsT0FBTyxDQUFBLENBQUEsQ0FBQztJQUFBLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLElBQUcsQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLEVBQUM7UUFBQyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFBQSxRQUFPLENBQUMsRUFBQztZQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQztZQUFBLEtBQUssQ0FBQyxDQUFDLEtBQUs7Z0JBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUEsTUFBTTtZQUFBLEtBQUssQ0FBQyxDQUFDLE9BQU87Z0JBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUEsTUFBTTtZQUFBLEtBQUssQ0FBQyxDQUFDLFdBQVc7Z0JBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUEsTUFBTTtZQUFBLE9BQU8sQ0FBQyxDQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUM7S0FBQyxDQUFBLENBQUM7Q0FBQyxDQUFBLFNBQVMsQ0FBQyxLQUFHLElBQUksQ0FBQyxHQUFDLHNCQUFzQixDQUFDLENBQUEsT0FBTyxDQUFDLENBQUMsTUFBTSxJQUFFLENBQUMsQ0FBQyxHQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQSxDQUFDLENBQUEsUUFBUSxDQUFBLENBQUMsQ0FBQSxTQUFTLEVBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFBLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsR0FBQyxvQkFBb0IsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxPQUFPLENBQUMsSUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLElBQUUsS0FBSyxDQUFDLElBQUksRUFBQyxDQUFDLElBQUUsQ0FBQyxJQUFFLEVBQUUsS0FBRyxDQUFDLENBQUEsQ0FBQyxDQUFBLEdBQUcsQ0FBQyxJQUFJLENBQUEsQ0FBQyxDQUFBLGNBQWMsRUFBQyxDQUFDLElBQUUsR0FBRyxDQUFDLEVBQUUsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQSxLQUFLLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQSwyQkFBMkIsRUFBQyxDQUFDLElBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQSxTQUFTLENBQUMsS0FBRyxJQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU07SUFBQyxPQUFNLEVBQUUsQ0FBQyxDQUFBLFFBQU8sT0FBTyxDQUFDLFFBQVEsRUFBQztJQUFDLEtBQUksT0FBTyxDQUFDLENBQUEsT0FBTSxZQUFZLENBQUM7SUFBQSxLQUFJLFFBQVEsQ0FBQyxDQUFBLE9BQU0sT0FBTyxDQUFDO0lBQUEsS0FBSSxPQUFPLENBQUMsQ0FBQSxPQUFNLE9BQU8sQ0FBQztJQUFBLE9BQU8sQ0FBQyxDQUFBLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQTtDQUFDLENBQUEsQ0FBQyxDQUFBLFNBQVMsQ0FBQyxLQUFHLElBQUcsQ0FBQyxDQUFDLE1BQU07SUFBQyxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFBLENBQUEsQ0FBQyxDQUFBLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBRSxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxLQUFLLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUEsQ0FBQyxDQUFBLEdBQUcsQ0FBQyxFQUFFLENBQUEsQ0FBQSxDQUFDLENBQUEsTUFBTSxDQUFFLFNBQVEsQ0FBQztJQUFDLFlBQVksQ0FBQyxJQUFFLElBQUcsS0FBSyxFQUFFLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsV0FBVyxJQUFFLE9BQU8sS0FBSyxFQUFDO1FBQUMsTUFBTSxDQUFDLEdBQUMsT0FBTyxDQUFDO1FBQUEsSUFBSSxDQUFDLENBQUMsR0FBQyxJQUFHLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUM7O1FBQUssSUFBSSxDQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQVcsSUFBRyxXQUFXLElBQUUsT0FBTyxVQUFVO1lBQUMsT0FBTyxVQUFVLENBQUMsQ0FBQSxJQUFHLFdBQVcsSUFBRSxPQUFPLElBQUk7WUFBQyxPQUFPLElBQUksQ0FBQyxDQUFBLElBQUcsV0FBVyxJQUFFLE9BQU8sTUFBTTtZQUFDLE9BQU8sTUFBTSxDQUFDLENBQUEsSUFBRyxLQUFLLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQztZQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQSxDQUFBLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQSxJQUFHLFdBQVcsSUFBRSxPQUFPLGVBQWUsRUFBQztRQUFDLE1BQU0sQ0FBQyxHQUFDLE9BQU8sQ0FBQztRQUFBLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUE7S0FBQzs7UUFBSyxJQUFJLENBQUMsQ0FBQyxHQUFDLGVBQWUsQ0FBQSxDQUFBLENBQUM7SUFBQSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBRSxJQUFHLENBQUMsQ0FBQyxXQUFXLElBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPO1FBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFBLElBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTTtRQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFBLElBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRztRQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxHQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLElBQUksQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLFdBQVcsSUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxHQUFDLEdBQUUsRUFBRSxHQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFBLElBQUksQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQSxJQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUM7UUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQUEsQ0FBQyxHQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUUsRUFBRSxHQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFDLDRCQUE0QixDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFBLEVBQUUsS0FBRyxDQUFDLENBQUMsT0FBTyxJQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLElBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFDLENBQUMsQ0FBQyxPQUFPLElBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUMsMEJBQTBCLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFBLElBQUc7UUFBQyxDQUFDLEdBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyxLQUFLLEVBQUMsVUFBVSxFQUFDLFdBQVcsRUFBQyxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsZUFBZSxDQUFBLENBQUMsQ0FBQSxTQUFTLENBQUEsQ0FBQyxDQUFBLGFBQWEsRUFBQyxPQUFPLEVBQUMsRUFBQyxrQkFBa0IsRUFBQyxnQkFBZ0IsRUFBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxJQUFJLEVBQUMsTUFBTSxFQUFDLFFBQVEsRUFBQyxRQUFRLEVBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFBO0tBQUM7SUFBQSxPQUFNLENBQUMsRUFBQztRQUFDLElBQUcsQ0FBQztZQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQUEsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQTtLQUFDO1lBQU87UUFBQyxDQUFDLElBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxXQUFXLElBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sR0FBQyxJQUFJLENBQUMsQ0FBQTtLQUFDLENBQUEsSUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUM7UUFBQyxNQUFNLENBQUMsR0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxDQUFDLENBQUM7UUFBQSxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtLQUFDLENBQUEsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUMsQ0FBQyxHQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUEsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsZUFBZSxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBQyxNQUFNLElBQUUsSUFBSSxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxDQUFBLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0NBQUMsQ0FBQSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLENBQUEsUUFBTyxDQUFDLEVBQUM7SUFBQyxLQUFJLGFBQWE7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQUEsTUFBTTtJQUFBLEtBQUksTUFBTSxDQUFDO0lBQUE7UUFBUSxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQUEsTUFBTTtJQUFBLEtBQUksTUFBTSxDQUFDO0lBQUEsS0FBSSxVQUFVLENBQUM7SUFBQSxLQUFJLE1BQU0sQ0FBQyxDQUFBLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUE7Q0FBQyxDQUFBLE9BQU8sQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFBLE1BQU0sQ0FBRSxTQUFRLENBQUM7SUFBQyxZQUFZLENBQUMsSUFBRSxLQUFLLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxJQUFJLENBQUMsQ0FBQyxJQUFFLE9BQU8sQ0FBQyxDQUFDLFdBQVcsSUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQSxDQUFDLENBQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUMsTUFBTSxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUMsR0FBRyxDQUFBLENBQUMsQ0FBQSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEdBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxjQUFjLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxlQUFlLEdBQUMsS0FBSyxDQUFDLEtBQUcsQ0FBQyxDQUFDLGVBQWUsSUFBRSxDQUFDLENBQUMsZUFBZSxFQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBQyxnQkFBZ0IsQ0FBQyxFQUFDLEVBQUUsS0FBRyxDQUFDLENBQUMsT0FBTyxJQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFDLDBCQUEwQixDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLENBQUEsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsSUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQSxFQUFFLEdBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFlBQVksSUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLEdBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsQ0FBQyxXQUFXLElBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sR0FBQyxHQUFFLEVBQUUsR0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxJQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxHQUFFLEVBQUUsR0FBQyxDQUFDLENBQUMsV0FBVyxJQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEdBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBRSxHQUFHLElBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBQyxHQUFHLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUUsQ0FBQyxDQUFDLFlBQVksSUFBRSxDQUFDLENBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsR0FBRSxFQUFFLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyw0QkFBNEIsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsVUFBVSxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsRUFBQyxDQUFDLENBQUMsU0FBUyxHQUFDLEdBQUUsRUFBRSxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsNEJBQTRCLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7Q0FBQyxDQUFBLE1BQU0sQ0FBRSxTQUFRLENBQUM7SUFBQyxZQUFZLENBQUMsSUFBRSxJQUFHLEtBQUssRUFBRSxFQUFDLFdBQVcsSUFBRSxPQUFPLEtBQUssSUFBRSxDQUFDLENBQUMsTUFBTTtRQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBSTtRQUFDLElBQUcsV0FBVyxJQUFFLE9BQU8sY0FBYztZQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUFBLElBQUksQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFBLENBQUM7SUFBQSxJQUFJLENBQUMsQ0FBQyxJQUFFLE9BQU8sQ0FBQyxDQUFDLFdBQVcsSUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQSxDQUFDLENBQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUMsTUFBTSxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUMsR0FBRyxDQUFBLENBQUMsQ0FBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLGVBQWUsQ0FBQyxDQUFDLElBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7Q0FBQyxDQUFBLE1BQU0sQ0FBQztJQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFFLE9BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFBLENBQUEsQ0FBQztJQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFFLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLGVBQWU7UUFBQyxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQSxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFBLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7Q0FBQyxDQUFBLENBQUMsQ0FBQyxtQkFBbUIsR0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLGVBQWUsR0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUEsTUFBTSxDQUFDO0lBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFFLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsc0JBQXNCLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO1FBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFBQSxJQUFHLENBQUMsQ0FBQyxLQUFHLENBQUM7WUFBQyxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFBQSxNQUFNLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDO1FBQUEsQ0FBQyxHQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksRUFBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUEsQ0FBQyxDQUFBLElBQUksQ0FBQTtLQUFDO1NBQUk7UUFBQyxNQUFNLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQUEsSUFBRyxDQUFDLENBQUMsS0FBRyxDQUFDO1lBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQUEsTUFBTSxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQztRQUFBLENBQUMsR0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLElBQUksQ0FBQTtLQUFDLENBQUEsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLElBQUcsQ0FBQyxDQUFDLElBQUk7UUFBQyxNQUFNLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUMsQ0FBQSxPQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztDQUFDLENBQUEsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxVQUFTLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsR0FBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFDLEdBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQyxHQUFDLFlBQVksRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixHQUFDLENBQUMsQ0FBQyxHQUFDLGtCQUFrQixFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEdBQUMsQ0FBQyxDQUFDLEdBQUMsa0JBQWtCLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLEdBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyxHQUFDLE9BQU8sQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEdBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLE1BQU0sQ0FBQztJQUFDLGdCQUFjLElBQUksQ0FBQyxTQUFTLEdBQUMsRUFBRSxDQUFBLENBQUEsQ0FBQztJQUFBLElBQUksQ0FBQyxDQUFDLElBQUUsS0FBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUztRQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsS0FBSyxDQUFDLENBQUMsSUFBRSxLQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTO1FBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLFFBQVEsS0FBRyxLQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTO1FBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUEsQ0FBQSxDQUFDO0lBQUEsU0FBUyxDQUFDLENBQUMsSUFBRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7Q0FBQyxDQUFBLENBQUMsVUFBUyxDQUFDLElBQUUsQ0FBQyxDQUFDLFlBQVksR0FBQyxjQUFjLEVBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBQyxZQUFZLEVBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDLGFBQWEsR0FBQyxlQUFlLEVBQUMsQ0FBQyxDQUFDLFlBQVksR0FBQyxjQUFjLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxNQUFNLENBQUM7SUFBQyxZQUFZLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLEdBQUUsRUFBRSxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsc05BQXNOLENBQUMsQ0FBQSxDQUFBLENBQUMsRUFBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxZQUFZLENBQUMsRUFBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxRQUFRLENBQUMsRUFBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxVQUFVLENBQUMsRUFBQyxJQUFJLENBQUMsMkJBQTJCLEdBQUMsR0FBRyxFQUFDLElBQUksQ0FBQywrQkFBK0IsR0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUEsRUFBRSxDQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxDQUFBLEVBQUUsQ0FBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsWUFBWSxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLElBQUksS0FBSyxLQUFHLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxJQUFJLFlBQVksS0FBRyxPQUFPLElBQUksQ0FBQyxVQUFVLElBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLElBQUUsSUFBSSxDQUFBLENBQUEsQ0FBQztJQUFBLElBQUksT0FBTyxLQUFHLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLElBQUUsRUFBRSxDQUFBLENBQUEsQ0FBQztJQUFBLElBQUksT0FBTyxDQUFDLENBQUMsSUFBRSxJQUFHLElBQUksQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLFlBQVksSUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxZQUFZO1FBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3RkFBd0YsQ0FBQyxDQUFDLENBQUEsSUFBRyxDQUFDLENBQUM7UUFBQyxNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsQ0FBQSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsS0FBSyxLQUFHLE9BQU8sSUFBSSxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxLQUFLLENBQUMsQ0FBQyxLQUFHLElBQUcsSUFBSSxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsWUFBWTtRQUFDLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyx1RUFBdUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUEsSUFBRztRQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxTQUFTLElBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsdUNBQXVDLENBQUMsQ0FBQTtLQUFDO0lBQUEsT0FBTSxDQUFDLEVBQUM7UUFBQyxPQUFPLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLGdFQUFnRSxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFBLENBQUM7SUFBQSxLQUFLLENBQUMsQ0FBQyxLQUFHLElBQUksQ0FBQyxDQUFDLEdBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxHQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQSxJQUFHO1FBQUMsTUFBTSxDQUFDLEdBQUMsRUFBQyxRQUFRLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFDLENBQUM7UUFBQSxJQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsNEJBQTRCLENBQUMsRUFBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsc0JBQXNCLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBQyxNQUFNLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQztZQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQztRQUFBLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLGlCQUFpQixJQUFFLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQztJQUFBLE9BQU0sQ0FBQyxFQUFDO1FBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLG9DQUFvQyxDQUFDLDJDQUEyQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBQyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtLQUFDLENBQUEsQ0FBQztJQUFBLEtBQUssQ0FBQyxJQUFJLEtBQUcsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBLElBQUc7UUFBQyxNQUFNLENBQUMsQ0FBQTtLQUFDO0lBQUEsT0FBTSxDQUFDLEVBQUMsR0FBRSxDQUFBLENBQUM7SUFBQSxFQUFFLENBQUMsQ0FBQyxJQUFFLE9BQU8sSUFBSSxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsWUFBWSxDQUFBLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsOEJBQThCLENBQUMsNERBQTRELENBQUMsRUFBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUEsSUFBSSxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsYUFBYSxDQUFBLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsK0JBQStCLENBQUMseUVBQXlFLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMseUJBQXlCLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsK0RBQStELENBQUMsRUFBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLENBQUMscUVBQXFFLENBQUMsRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsTUFBTSxDQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsSUFBRSxNQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLElBQUksQ0FBQyxDQUFDLENBQUEsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBQyxjQUFjLEdBQUMsR0FBRSxFQUFFLEdBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQSxPQUFPLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUUsRUFBRSxDQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFHLENBQUMsQ0FBQyxVQUFVLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxLQUFLLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUEsRUFBRSxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLENBQUMsQ0FBQyxDQUFDLElBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsRUFBRSxDQUFDLENBQUMsSUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxJQUFJLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxJQUFFLE1BQUssQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLE1BQU0sQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLElBQUUsTUFBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFHLENBQUMsQ0FBQyxVQUFVLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxLQUFLLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQSxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQSxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLElBQUUsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsSUFBRyxDQUFDLENBQUM7UUFBQyxPQUFPLENBQUEsQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFHLENBQUM7UUFBQyxJQUFHLENBQUMsRUFBQztZQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQSxDQUFDLENBQUMsS0FBRyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFDOztZQUFLLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxPQUFPLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxjQUFjLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxhQUFhLENBQUMsQ0FBQyxJQUFFLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxDQUFDLENBQUMsQ0FBQyxJQUFFLElBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO1FBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFBLEtBQUksTUFBTSxDQUFDLElBQUksQ0FBQztZQUFDLFFBQU8sQ0FBQyxDQUFDLElBQUksRUFBQztnQkFBQyxLQUFLLENBQUMsQ0FBQyxVQUFVO29CQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQUEsTUFBTTtnQkFBQSxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUM7Z0JBQUEsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUE7b0JBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQUEsSUFBRyxDQUFDLEVBQUM7d0JBQUMsQ0FBQyxDQUFDLElBQUks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QyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxDQUFDLEtBQUcsSUFBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLElBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLElBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUUsRUFBRSxDQUFBLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxFQUFDLEtBQUssQ0FBQyxLQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFBQSxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxJQUFFLEVBQUUsR0FBQyxJQUFHLElBQUksQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLFNBQVM7WUFBQyxJQUFHO2dCQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFBQztZQUFBLE1BQUs7Z0JBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFBO2FBQUMsQ0FBQSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtLQUFDLENBQUEsQ0FBQztJQUFBLGFBQWEsS0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxxRUFBcUUsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUUsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLElBQUcsQ0FBQyxDQUFDO1FBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFDLG1DQUFtQyxDQUFDLFVBQVUsQ0FBQyxFQUFDLEtBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxJQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyx3QkFBd0IsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLFlBQVksSUFBSSxDQUFDLEVBQUMsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBQyxpQ0FBaUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQSxJQUFJLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsS0FBSSxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQUMsSUFBRztZQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQztZQUFBLENBQUMsR0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsSUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsa0NBQWtDLENBQUMsNkJBQTZCLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFDLG1DQUFtQyxFQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxDQUFBO1NBQUM7UUFBQSxPQUFNLENBQUMsRUFBQztZQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyw4QkFBOEIsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQSxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUMsR0FBRyxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQSxDQUFDLENBQUEsS0FBSyxDQUFDLEtBQUcsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFDLHdCQUF3QixDQUFDLCtCQUErQixDQUFDLENBQUMsWUFBWSxJQUFJLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFDLGlDQUFpQyxFQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLHFCQUFxQixDQUFDLGdEQUFnRCxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsQ0FBQyxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLGtDQUFrQyxDQUFDLDJCQUEyQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLElBQUUsQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLCtFQUErRSxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUUsSUFBSSxLQUFLLENBQUMsb0VBQW9FLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsYUFBYSxDQUFBLENBQUMsQ0FBQSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxJQUFJLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxTQUFTLElBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsSUFBSSxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsU0FBUyxJQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsRUFBRSxDQUFDLENBQUMsSUFBRSxJQUFHLElBQUksQ0FBQyxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsU0FBUyxJQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFBLElBQUc7WUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFDO1FBQUEsT0FBTSxDQUFDLEVBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLDBDQUEwQyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFBO1NBQUM7S0FBQyxDQUFBLENBQUM7SUFBQSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBRSxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxLQUFHLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLElBQUcsSUFBSSxLQUFHLENBQUM7UUFBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsb0dBQW9HLENBQUMsRUFBQyxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFHLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFlBQVksRUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsNkNBQTZDLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQyxDQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsMEJBQTBCLENBQUMsRUFBQyxDQUFDLEtBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUM7UUFBQyxJQUFHO1lBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUEsRUFBRSxDQUFBLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBQztRQUFBLE9BQU0sQ0FBQyxFQUFDO1lBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxpREFBaUQsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUFDO1FBQUEsSUFBRyxJQUFJLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxZQUFZO1lBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsdUZBQXVGLENBQUMsQ0FBQTtLQUFDLENBQUEsT0FBSyxJQUFJLEtBQUcsQ0FBQyxHQUFFO1FBQUMsSUFBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFDLDRCQUE0QixDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxFQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUEsRUFBRSxHQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxZQUFZO1lBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsbUZBQW1GLENBQUMsQ0FBQztRQUFBLElBQUc7WUFBQyxJQUFHLE1BQU0sSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFDLHlDQUF5QyxDQUFDLEVBQUMsQ0FBQyxLQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTTtnQkFBQyxJQUFHO29CQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBLEVBQUUsQ0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQUM7Z0JBQUEsT0FBTSxDQUFDLEVBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyx1REFBdUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFBO2lCQUFDO1lBQUEsT0FBTTtTQUFDO1FBQUEsT0FBTSxDQUFDLEVBQUM7WUFBQyxJQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsOENBQThDLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsWUFBWTtnQkFBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsNEJBQTRCLElBQUksQ0FBQyxDQUFDLDRFQUE0RSxDQUFDLEVBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLGFBQWEsSUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUFBLENBQUMsR0FBQyxDQUFDLFlBQVksS0FBSyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFBLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7U0FBQztLQUFDLENBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBQywrQ0FBK0MsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFDLENBQUMsV0FBVyxDQUFDLDZDQUE2QyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFBLENBQUEsQ0FBQztJQUFBLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxJQUFHO1FBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixDQUFDLEVBQUMsbUJBQW1CLEVBQUMsQ0FBQyxFQUFDLGtCQUFrQixFQUFDLENBQUMsRUFBQyxXQUFXLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtLQUFDO0lBQUEsT0FBTSxDQUFDLEVBQUM7UUFBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsNkNBQTZDLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksQ0FBQTtLQUFDLENBQUEsQ0FBQztJQUFBLEVBQUUsQ0FBQyxDQUFDLElBQUUsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLElBQUksQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBLEVBQUUsR0FBQyxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFHO1FBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQTtLQUFDO0lBQUEsT0FBTSxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLHdDQUF3QyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0tBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLENBQUMsS0FBRyxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLEtBQUssQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsQ0FBQyxLQUFHLElBQUksQ0FBQyxFQUFFLElBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLElBQUcsQ0FBQztRQUFDLE9BQU8sQ0FBQyxLQUFHLENBQUMsQ0FBQyxNQUFNLENBQUEsQ0FBQyxDQUFBLEVBQUMsU0FBUyxFQUFDLENBQUMsRUFBQyxTQUFTLEVBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsQ0FBQSxDQUFDLENBQUEsRUFBQyxTQUFTLEVBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFBO1FBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUFBLE9BQU8sSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsTUFBTSxDQUFBLENBQUMsQ0FBQSxFQUFDLFNBQVMsRUFBQyxDQUFDLEVBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBQyxTQUFTLEVBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsQ0FBQSxDQUFDLENBQUEsRUFBQyxTQUFTLEVBQUMsQ0FBQyxFQUFDLFlBQVksRUFBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBQyxDQUFBO0tBQUMsQ0FBQSxDQUFDO0lBQUEsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsSUFBRyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBQztRQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUFBLEtBQUksTUFBTSxDQUFDLElBQUksQ0FBQztZQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBQyxRQUFRLEVBQUMsR0FBRSxFQUFFLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFFLEVBQUUsQ0FBQSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQSxFQUFFLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDLEdBQUMsQ0FBQyxZQUFZLEtBQUssQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQSxDQUFDLENBQUEsQ0FBQyxJQUFFLENBQUMsQ0FBQyxRQUFRLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQSxDQUFDLENBQUEsZUFBZSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRSxFQUFFLENBQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFBLEVBQUUsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUUsRUFBRSxDQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDLEVBQUMsQ0FBQyxDQUFBO0tBQUMsQ0FBQSxDQUFDO0lBQUEsRUFBRSxDQUFDLENBQUMsSUFBRSxNQUFNLENBQUMsR0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFBLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDO1FBQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUEsSUFBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDO1lBQUMsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUFBLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUE7U0FBQztLQUFDLENBQUEsT0FBTSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxFQUFFLENBQUMsQ0FBQyxJQUFFLE9BQU8sQ0FBQyxJQUFFLENBQUMsQ0FBQyxTQUFTLElBQUUsVUFBVSxJQUFFLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQSxDQUFBLENBQUM7SUFBQSxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLE9BQU8sSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsTUFBTSxDQUFBLENBQUMsQ0FBQSxFQUFDLFNBQVMsRUFBQyxDQUFDLEVBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBQyxTQUFTLEVBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBQyxDQUFBLENBQUMsQ0FBQSxFQUFDLFNBQVMsRUFBQyxDQUFDLEVBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsZ0JBQWdCLEVBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxFQUFFLENBQUMsQ0FBQyxJQUFFLE9BQU0sRUFBQyxZQUFZLEVBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsZ0JBQWdCLEVBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxPQUFNLEVBQUMsWUFBWSxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsVUFBVSxFQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLE9BQU8sQ0FBQyxDQUFBLENBQUMsQ0FBQSxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsWUFBWSxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBQyxDQUFBLENBQUMsQ0FBQSxFQUFDLFlBQVksRUFBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBQyxDQUFBLENBQUEsQ0FBQztDQUFDLENBQUEsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQSxNQUFNLENBQUM7SUFBQyxZQUFZLENBQUMsSUFBRSxJQUFJLENBQUMsRUFBRSxHQUFDLEtBQUssQ0FBQyxLQUFHLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLDRCQUE0QixDQUFDLENBQUMsSUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUEsQ0FBQSxDQUFDO0NBQUMsQ0FBQSxNQUFNLENBQUM7Q0FBRSxDQUFBLENBQUMsQ0FBQyxhQUFhLEdBQUMsZUFBZSxFQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsUUFBUSxDQUFDLENBQUEsTUFBTSxDQUFFLFNBQVEsQ0FBQztJQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsSUFBRSxLQUFLLEVBQUUsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLElBQUksQ0FBQyxFQUFFLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxHQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxPQUFPLENBQUMsSUFBRSxHQUFHLEtBQUcsQ0FBQyxDQUFDLFVBQVUsSUFBRSxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsTUFBTSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxFQUFFLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxPQUFPLElBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFDLEVBQUUsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFDLFVBQVUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFBLENBQUMsQ0FBQSxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsZUFBZSxDQUFDLENBQUMsSUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztDQUFDLENBQUEsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxVQUFTLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLENBQUMsR0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFDLEdBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEdBQUMsQ0FBQyxDQUFDLEdBQUMsa0JBQWtCLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDLEdBQUMsYUFBYSxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLFVBQVMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxHQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsR0FBQyxRQUFRLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxNQUFNLENBQUM7SUFBQyxnQkFBYyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsSUFBSSxDQUFBLENBQUEsQ0FBQztJQUFBLEtBQUssS0FBRyxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxJQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLElBQUksTUFBTSxLQUFHLE9BQU8sSUFBSSxDQUFBLENBQUEsQ0FBQztJQUFBLElBQUksT0FBTyxLQUFHLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQSxDQUFBLENBQUM7Q0FBQyxDQUFBLE1BQU0sQ0FBQztJQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsSUFBSSxDQUFBLENBQUEsQ0FBQztJQUFBLElBQUksV0FBVyxLQUFHLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUEsQ0FBQSxDQUFDO0lBQUEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLElBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsZ0JBQWdCLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsZ0JBQWdCLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLHFDQUFxQyxDQUFDLEVBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxNQUFNLElBQUUsV0FBVyxJQUFFLE9BQU8sY0FBYyxJQUFFLFFBQVEsSUFBRSxPQUFNLENBQUMsSUFBSSxjQUFjLENBQUMsQ0FBQyxZQUFZO1FBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyw0RkFBNEYsQ0FBQyxDQUFDLENBQUEsTUFBSyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFDLEVBQUMsQ0FBQyxHQUFDLEVBQUMsV0FBVyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLEdBQUcsRUFBQyxlQUFlLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUMsQ0FBQyxDQUFBLENBQUMsS0FBRyxDQUFDLENBQUMsTUFBTSxJQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxHQUFDLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxvQ0FBb0MsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxHQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsR0FBRyxLQUFHLENBQUMsQ0FBQyxVQUFVLENBQUEsQ0FBQyxDQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxxREFBcUQsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxJQUFFLEVBQUUsRUFBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxJQUFHO1FBQUMsT0FBSyxJQUFJLENBQUMsRUFBRTtZQUFFLElBQUc7Z0JBQUMsTUFBTSxDQUFDLEdBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7Z0JBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxvQ0FBb0MsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFBQSxNQUFNLENBQUMsR0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztnQkFBQSxHQUFHLEtBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQSxDQUFDLENBQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFDLG9EQUFvRCxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxHQUFHLEtBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQSxDQUFDLENBQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLHFEQUFxRCxDQUFDLENBQUMsVUFBVSxHQUFHLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLElBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUEsQ0FBQyxDQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLENBQUMsU0FBUyxJQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsb0RBQW9ELENBQUMsQ0FBQTthQUFDO1lBQUEsT0FBTSxDQUFDLEVBQUM7Z0JBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUEsQ0FBQyxZQUFZLENBQUMsQ0FBQSxDQUFDLENBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxvREFBb0QsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyx3REFBd0QsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7YUFBQztLQUFDO1lBQU87UUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLDJDQUEyQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFdBQVcsSUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUE7S0FBQyxDQUFBLENBQUM7SUFBQSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLGFBQWEsRUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsS0FBSyxDQUFDLElBQUksS0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLDJDQUEyQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUEsSUFBRztRQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLHFEQUFxRCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUFBLE1BQU0sQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQztRQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUM7UUFBQSxNQUFNLENBQUMsR0FBQyxFQUFDLE9BQU8sRUFBQyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUMsRUFBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUMsZUFBZSxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFDLENBQUM7UUFBQSxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyw4Q0FBOEMsQ0FBQyxDQUFBO0tBQUM7WUFBTztRQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsd0NBQXdDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUE7S0FBQyxDQUFBLENBQUM7SUFBQSxFQUFFLEtBQUcsSUFBRyxJQUFJLENBQUMsT0FBTyxFQUFDO1FBQUMsSUFBSSxDQUFDLEdBQUMsK0NBQStDLENBQUM7UUFBQSxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsQ0FBQyxJQUFFLFVBQVUsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUFDLENBQUEsQ0FBQztDQUFDLENBQUEsTUFBTSxDQUFDO0lBQUMsWUFBWSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLE9BQU8sR0FBQyxJQUFJLENBQUEsQ0FBQSxDQUFDO0lBQUEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFF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R0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFBLENBQUEsQ0FBQyxDQUFBO1NBQUM7UUFBQSxPQUFNLENBQUMsRUFBQztZQUFDLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FBQztLQUFDOztRQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQywyRUFBMkUsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFFLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxJQUFJLEtBQUcsT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBLENBQUEsQ0FBQztJQUFBLEVBQUUsQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLEVBQUUsSUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxJQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7Q0FBQyxDQUFBLE1BQU0sQ0FBQztJQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLE9BQU8sR0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxDQUFDLENBQUEsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxnQkFBZ0IsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxnQkFBZ0IsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsb0NBQW9DLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsQ0FBQyxHQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUEsQ0FBQyxHQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUEsTUFBTSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLElBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsYUFBYSxFQUFDO1FBQUMsTUFBTSxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDO1FBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxFQUFDLEVBQUMsT0FBTyxFQUFDLEVBQUMsR0FBRyxDQUFDLEVBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFDLEVBQUMsQ0FBQyxDQUFBO0tBQUM7O1FBQUssQ0FBQyxJQUFFLENBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLEdBQUcsQ0FBQSxDQUFDLENBQUEsR0FBRyxDQUFDLEdBQUMsZ0JBQWdCLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUMsYUFBYSxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUEsRUFBRSxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsMEJBQTBCLENBQUMsR0FBRyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFBLENBQUEsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxDQUFBLEVBQUUsR0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFDLEdBQUMsV0FBVyxJQUFFLE9BQU8sVUFBVSxJQUFFLENBQUMsWUFBWSxVQUFVLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxLQUFLLENBQUEsQ0FBQyxDQUFBLHVDQUF1QyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsMEJBQTBCLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUEsRUFBRSxHQUFDLElBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyx5Q0FBeUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLENBQUMsU0FBUztRQUFDLElBQUc7WUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUFDO1FBQUEsT0FBTSxDQUFDLEVBQUM7WUFBQyxPQUFPLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUFDLENBQUEsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxDQUFBLEVBQUUsR0FBQyxJQUFHLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUk7UUFBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUM7UUFBQSxDQUFDLEdBQUMsV0FBVyxJQUFFLE9BQU8sVUFBVSxJQUFFLENBQUMsWUFBWSxVQUFVLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxLQUFLLENBQUEsQ0FBQyxDQUFBLGdTQUFnUyxFQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLElBQUksQ0FBQyxDQUFDLElBQUUsT0FBTyxJQUFJLENBQUMsRUFBRSxJQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxLQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFBLENBQUMsQ0FBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsd0NBQXdDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLElBQUksS0FBRyxPQUFPLElBQUksQ0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQSxDQUFBLENBQUM7SUFBQSxFQUFFLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxFQUFFLElBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBQyxHQUFFLEVBQUUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEdBQUMsR0FBRSxFQUFFLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFDLEdBQUUsRUFBRSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLHVDQUF1QyxDQUFDLEVBQUMsSUFBSSxDQUFDLE9BQU8sSUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUMsUUFBUSxJQUFFLEdBQUcsS0FBRyxDQUFDLENBQUMsSUFBSSxDQUFBLENBQUMsQ0FBQSxDQUFDLFlBQVksS0FBSyxDQUFBLENBQUMsQ0FBQSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUEsQ0FBQyxDQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLE1BQU0sSUFBRSxpQkFBaUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLEVBQUUsQ0FBQyxDQUFDLElBQUUsT0FBTyxDQUFDLElBQUUsU0FBUyxJQUFFLE9BQU8sQ0FBQyxDQUFDLFFBQVEsSUFBRSxRQUFRLElBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFBLENBQUEsQ0FBQztDQUFDLENBQUEsTUFBTSxDQUFDO0lBQUMsWUFBWSxDQUFDLEVBQUMsQ0FBQyxHQUFDLEVBQUUsSUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBLElBQUcsSUFBSSxDQUFDLEVBQUUsR0FBQyxHQUFFLEVBQUUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxLQUFLLENBQUMsS0FBRyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQyxDQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFDLENBQUEsSUFBSSxLQUFHLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLFFBQVEsQ0FBQSxDQUFDLENBQUEsS0FBSyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixHQUFDLEtBQUssQ0FBQyxLQUFHLENBQUMsQ0FBQyxpQkFBaUIsSUFBRSxDQUFDLENBQUMsaUJBQWlCLEVBQUMsU0FBUyxJQUFFLE9BQU8sQ0FBQyxDQUFDLGVBQWUsSUFBRSxLQUFLLENBQUMsS0FBRyxDQUFDLENBQUMsZUFBZTtRQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsaUVBQWlFLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxlQUFlLEdBQUMsS0FBSyxDQUFDLEtBQUcsQ0FBQyxDQUFDLGVBQWUsSUFBRSxDQUFDLENBQUMsZUFBZSxFQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUMsS0FBSyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQSxDQUFDLENBQUEsR0FBRyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUEsSUFBSSxDQUFDLEdBQUMsSUFBSSxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQSxJQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUM7UUFBQyxNQUFNLENBQUMsR0FBQyxPQUFPLENBQUM7UUFBQSxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUE7S0FBQyxDQUFBLENBQUMsQ0FBQyxNQUFNLElBQUUsV0FBVyxJQUFFLE9BQU8sU0FBUyxJQUFFLENBQUMsQ0FBQyxTQUFTLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxTQUFTLEdBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxNQUFNLElBQUUsV0FBVyxJQUFFLE9BQU8sV0FBVyxJQUFFLENBQUMsQ0FBQyxXQUFXLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxJQUFFLEtBQUssQ0FBQyxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxXQUFXLEdBQUMsV0FBVyxFQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxjQUFjLEVBQUMsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsU0FBUyxHQUFDLElBQUksRUFBQyxJQUFJLENBQUMsT0FBTyxHQUFDLElBQUksQ0FBQSxDQUFBLENBQUM7SUFBQSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBRSxJQUFHLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsZ0JBQWdCLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLDZDQUE2QyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLGNBQWMsS0FBRyxJQUFJLENBQUMsQ0FBQztRQUFDLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyx5RUFBeUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFHLElBQUksQ0FBQyxDQUFDLEdBQUMsWUFBWSxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLElBQUksQ0FBQyxFQUFFLEVBQUMsZUFBZSxLQUFHLElBQUksQ0FBQyxDQUFDLEVBQUM7UUFBQyxNQUFNLENBQUMsR0FBQyw4REFBOEQsQ0FBQztRQUFBLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUMsRUFBQyxNQUFNLElBQUksQ0FBQyxFQUFFLEVBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsQ0FBQSxJQUFHLFdBQVcsS0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFDO1FBQUMsTUFBTSxDQUFDLEdBQUMsNkdBQTZHLENBQUM7UUFBQSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsQ0FBQSxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLElBQUksQ0FBQyxDQUFDLElBQUUsT0FBTSxXQUFXLEtBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxxRUFBcUUsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBRSxPQUFNLGNBQWMsS0FBRyxJQUFJLENB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R0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFDLGNBQWMsRUFBQyxJQUFJLENBQUMsU0FBUyxHQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsQ0FBQSxDQUFDO0lBQUEsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUUsTUFBTSxDQUFDLEdBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLGdDQUFnQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUEsSUFBRztRQUFDLE1BQU0sQ0FBQyxHQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLEVBQUMsT0FBTyxFQUFDLEVBQUUsRUFBQyxPQUFPLEVBQUMsRUFBQyxHQUFHLENBQUMsRUFBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFDLEVBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFDLGVBQWUsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBQyxDQUFDLENBQUM7UUFBQSxJQUFHLEdBQUcsS0FBRyxDQUFDLENBQUMsVUFBVTtZQUFDLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUFBLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQUEsT0FBTSxD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QUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLElBQUUsRUFBRSxDQUFDLENBQUM7UUFBQSxLQUFLLENBQUMsQ0FBQyxnQkFBZ0I7WUFBQyxJQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXO2dCQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztZQUFBLE9BQU8sSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUFBLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFBLE9BQU8sSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUFBLE9BQU8sQ0FBQyxDQUFBLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUE7S0FBQyxDQUFBLENBQUM7SUFBQSxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFDLElBQUksQ0FBQyxTQUFTLEVBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxDQUFBLEVBQUUsQ0FBQSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBLElBQUcsSUFBSSxJQUFFLENBQUM7UUFBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsdUJBQXVCLENBQUMsQ0FBQyxTQUFTLCtDQUErQyxDQUFDLEVBQUMsSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxTQUFTLCtDQUErQyxDQUFDLENBQUMsQ0FBQSxJQUFHLENBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFFLE9BQU0sQ0FBQyxDQUFDLElBQUUsQ0FBQyxJQUFFLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7UUFBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsMENBQTBDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsOEJBQThCLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDO1FBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLGdFQUFnRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBLElBQUcsQ0FBQyxLQUFHLENB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LENBQUMsSUFBRSxXQUFXLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQSxDQUFDLENBQUEsRUFBRSxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBRSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsS0FBRyxDQUFDLENBQUEsQ0FBQyxDQUFBLEdBQUcsQ0FBQSxDQUFDLENBQUEsR0FBRyxFQUFDLENBQUMsSUFBRSxtQkFBbUIsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztDQUFDLENBQUEsTUFBTSxDQUFDO0lBQUMsWUFBWSxDQUFDLElBQUUsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUEsQ0FBQSxDQUFDO0lBQUEsSUFBSSxDQUFDLENBQUMsSUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsSUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQSxDQUFBLENBQUM7SUFBQSxJQUFJLEtBQUcsT0FBTyxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQSxDQUFBLENBQUM7SUFBQSxFQUFFLENBQUMsQ0FBQyxJQUFFLElBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLElBQUUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFFLE9BQU8sQ0FBQztRQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLE9BQU8sSUFBSSxDQUFDLEVBQUUsb0JBQW9CLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUEsQ0FBQSxDQUFDO0lBQUEsS0FBSyxDQUFDLEVBQUUsS0FBRyxTQUFPO1FBQUMsSUFBRyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQztZQUFDLElBQUksQ0FBQyxFQUFFLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUFBLE1BQUs7U0FBQztRQUFBLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLENBQUM7UUFBQSxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQUEsSUFBSSxDQUFDLEVBQUUsR0FBQyxLQUFLLENBQUMsQ0FBQztRQUFBLE1BQU0sQ0FBQyxHQUFDLFFBQVEsSUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQztRQUFBLElBQUc7WUFBQyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtTQUFDO1FBQUEsT0FBTSxDQUFDLEVBQUM7WUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQUM7S0FBQyxDQUFBLENBQUM7SUFBQSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBRSxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBLEVBQUUsQ0FBQSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxDQUFBLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFBLEtBQUksTUFBTSxDQUFDLElBQUksQ0FBQztRQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUEsQ0FBQSxDQUFDO0NBQUMsQ0FBQSxNQUFNLENBQUM7SUFBQyxnQkFBYyxJQUFJLENBQUMsT0FBTyxHQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxPQUFPLEtBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFBLENBQUEsQ0FBQztJQUFBLE1BQU0sQ0FBQyxDQUFDLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7Q0FBQyxDQUFBLE1BQU0sQ0FBQztJQUFDLGdCQUFjLElBQUksQ0FBQyxJQUFJLEdBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxPQUFPLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxjQUFjLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQSxDQUFBLENBQUM7SUFBQSxhQUFhLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxJQUFHLFFBQVEsSUFBRSxPQUFPLENBQUM7UUFBQyxNQUFNLElBQUksS0FBSyxDQUFDLHlEQUF5RCxDQUFDLENBQUMsQ0FBQSxJQUFHLENBQUMsQ0FBQztRQUFDLE9BQU0sRUFBRSxDQUFDLENBQUEsSUFBSSxLQUFHLENBQUMsSUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQSxNQUFNLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQSxLQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBQztRQUFDLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQSxJQUFHLFFBQVEsSUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJO1lBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQUEsUUFBTyxDQUFDLENBQUMsSUFBSSxFQUFDO1lBQUMsS0FBSyxDQUFDLENBQUMsVUFBVTtnQkFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFBLE1BQU07WUFBQSxLQUFLLENBQUMsQ0FBQyxVQUFVO2dCQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUEsTUFBTTtZQUFBLEtBQUssQ0FBQyxDQUFDLFVBQVU7Z0JBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQSxNQUFNO1lBQUEsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQUEsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUEsTUFBTTtZQUFBO2dCQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBQyx3QkFBd0IsR0FBQyxDQUFDLENBQUMsSUFBSSxHQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUFBLFNBQVE7U0FBQztRQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxDQUFBLE9BQU8sQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLFlBQVksQ0FBQyxDQUFDLElBQUUsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFBQSxFQUFFLENBQUMsQ0FBQyxJQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyx5Q0FBeUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxLQUFHLENBQUMsQ0FBQyxZQUFZLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFDLHlDQUF5QyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsRUFBRSxDQUFDLENBQUMsSUFBRSxJQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBQyx5Q0FBeUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxLQUFHLENBQUMsQ0FBQyxJQUFJO1FBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztJQUFBLEVBQUUsQ0FBQyxDQUFDLElBQUUsSUFBRyxDQUFDLENBQUMsTUFBTSxJQUFFLENBQUMsQ0FBQyxLQUFLO1FBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFFLENBQUMsQ0FBQyxLQUFLLElBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDLHlDQUF5QyxDQUFDLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFDLHlDQUF5QyxDQUFDLENBQUEsQ0FBQSxDQUFDO0lBQUEsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsSUFBRyxRQUFRLElBQUUsT0FBTyxDQUFDLElBQUUsRUFBRSxLQUFHLENBQUM7UUFBQyxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQztDQUFDLENBQUEsTUFBTSxDQUFDLEdBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUEsTUFBTSxDQUFDO0lBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFFLElBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsU0FBUyxDQUFDLEVBQUMsS0FBSyxDQUFDLEtBQUcsQ0FBQyxDQUFDLEdBQUc7UUFBQyxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQztTQUFLLElBQUcsUUFBUSxJQUFFLE9BQU8sQ0FBQyxFQUFDO1FBQUMsTUFBTSxDQUFDLEdBQUMsVUFBUyxDQUFDLElBQUUsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUEsSUFBRyxLQUFLLENBQUMsS0FBRyxDQUFDO1lBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQSxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUEsSUFBSSxDQUFDLE1BQU0sR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUFDOztRQUFLLElBQUksQ0FBQyxNQUFNLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxPQUFPLElBQUksQ0FBQSxDQUFBLENBQUM7SUFBQSxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxxQkFBcUIsR0FBQyxRQUFRLElBQUUsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFBLEVBQUMsR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQSxDQUFDLENBQUEsRUFBQyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBQyxTQUFTLEVBQUMsQ0FBQyxFQUFDLEVBQUMsSUFBSSxDQUFBLENBQUEsQ0FBQztJQUFBLGVBQWUsQ0FBQyxDQUFDLElBQUUsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxVQUFVLENBQUMsRUFBQyxJQUFJLENBQUMsUUFBUSxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUEsQ0FBQSxDQUFDO0lBQUEsc0JBQXNCLENBQUMsQ0FBQyxJQUFFLElBQUcsSUFBSSxDQUFDLGVBQWU7UUFBQyxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBQSxDQUFDLENBQUEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsSUFBSSxDQUFDLGVBQWUsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsSUFBSSxDQUFDLGVBQWUsR0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLElBQUksQ0FBQyxlQUFlLEdBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxDQUFBLENBQUEsQ0FBQztJQUFBLEtBQUssS0FBRyxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMscUJBQXFCLElBQUUsRUFBRSxDQUFDLENBQUEsSUFBRyxLQUFLLENBQUMsS0FBRyxDQUFDLENBQUMsTUFBTSxJQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRztRQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsMEZBQTBGLENBQUMsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBQyxJQUFJLENBQUMsUUFBUSxJQUFFLElBQUksQ0FBQyxFQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQSxDQUFBLENBQUM7Q0FBQyxDQUFBLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLElBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFDLFNBQVMsRUFBQyxFQUFDLEtBQUssRUFBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBQyxPQUFPLEVBQUMsRUFBQyxLQUFLLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxJQUFFLE9BQU8sSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsRUFBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxJQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBQyxTQUFTLEVBQUMsRUFBQyxLQUFLLEVBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUMsRUFBRSxFQUFDLFFBQVEsSUFBRSxPQUFPLE9BQU8sSUFBRSxRQUFRLElBQUUsT0FBTyxNQUFNLENBQUEsQ0FBQyxDQUFBLE1BQU0sQ0FBQyxPQUFPLEdBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQyxDQUFBLFVBQVUsSUFBRSxPQUFPLE1BQU0sSUFBRSxNQUFNLENBQUMsR0FBRyxDQUFBLENBQUMsQ0FBQSxNQUFNLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxRQUFRLElBQUUsT0FBTyxPQUFPLENBQUEsQ0FBQyxDQUFBLE9BQU8sQ0FBQyxPQUFPLEdBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxPQUFPLEdBQUMsQ0FBQyxFQUFFLENBQUM7O0FBQzMxMEMsdUNBQXVDIn0=