import { TimeSpan } from "../Common/TimeSpan";
import { Uuid } from "../Common/Uuid";
import { TernaryExpression } from "../ExpressionBuilder/Expression/TernaryExpression";
export const toHexaString = function (binary) {
    if (binary instanceof ArrayBuffer) {
        let hexaString = Array.from(new Uint8Array(binary))
            .map((b) => {
            const a = b.toString(16);
            return a.length < 2 ? "0" + a : a;
        }).join("");
        if (!hexaString) {
            hexaString = "0";
        }
        return `0x${hexaString}`;
    }
    else {
        return toHexaString(binary.buffer);
    }
};
export const resolveClone = function (exp, replaceMap) {
    if (!exp) {
        return exp;
    }
    return (replaceMap.has(exp) ? replaceMap.get(exp) : exp.clone(replaceMap));
};
export const isEqual = function (a, b) {
    return a === b ||
        (!isNull(a) && !isNull(b)
            && a.constructor === b.constructor && a.hasOwnProperty(Symbol.toPrimitive)
            && b.hasOwnProperty(Symbol.toPrimitive) && a[Symbol.toPrimitive] === b[Symbol.toPrimitive]);
};
export const mapReplaceExp = function (replaceMap, sourceExp, targetExp) {
    replaceMap.set(sourceExp, targetExp);
    if (sourceExp.projectedColumns && targetExp.projectedColumns) {
        const selectExp1 = sourceExp;
        const selectExp2 = targetExp;
        mapReplaceExp(replaceMap, selectExp1.entity, selectExp2.entity);
        if (isGroupExp(selectExp1) && isGroupExp(selectExp2)) {
            mapReplaceExp(replaceMap, selectExp1.key, selectExp2.key);
            mapReplaceExp(replaceMap, selectExp1.itemSelect, selectExp2.itemSelect);
        }
        const projectedCol = selectExp2.projectedColumns;
        for (const col of selectExp1.projectedColumns) {
            const tCol = projectedCol.first((o) => o.propertyName === col.propertyName);
            if (tCol) {
                replaceMap.set(col, tCol);
            }
        }
    }
    else if (sourceExp.primaryColumns && targetExp.primaryColumns) {
        const entityExp1 = sourceExp;
        const entityExp2 = targetExp;
        for (const col of entityExp1.columns) {
            const tCol = entityExp2.columns.first((o) => o.propertyName === col.propertyName);
            if (tCol) {
                replaceMap.set(col, tCol);
            }
        }
    }
};
export const mapKeepExp = function (replaceMap, exp) {
    replaceMap.set(exp, exp);
    if (exp.projectedColumns) {
        const selectExp = exp;
        mapKeepExp(replaceMap, selectExp.entity);
        if (isGroupExp(selectExp)) {
            mapKeepExp(replaceMap, selectExp.key);
            mapKeepExp(replaceMap, selectExp.itemSelect);
        }
        for (const o of selectExp.projectedColumns) {
            mapKeepExp(replaceMap, o);
        }
    }
    else if (exp.primaryColumns) {
        const entityExp = exp;
        for (const o of entityExp.columns) {
            mapKeepExp(replaceMap, o);
        }
    }
};
export const removeExpFromMap = function (replaceMap, exp) {
    replaceMap.delete(exp);
    if (exp.projectedColumns) {
        const selectExp = exp;
        removeExpFromMap(replaceMap, selectExp.entity);
        if (isGroupExp(selectExp)) {
            removeExpFromMap(replaceMap, selectExp.key);
            removeExpFromMap(replaceMap, selectExp.itemSelect);
        }
        for (const o of selectExp.projectedColumns) {
            removeExpFromMap(replaceMap, o);
        }
    }
    else if (exp.primaryColumns) {
        const entityExp = exp;
        for (const o of entityExp.columns) {
            removeExpFromMap(replaceMap, o);
        }
    }
};
export const visitExpression = (source, finder) => {
    if (finder(source) === false) {
        return;
    }
    if (source.rightOperand) {
        const binaryOperatorExp = source;
        visitExpression(binaryOperatorExp.leftOperand, finder);
        visitExpression(binaryOperatorExp.rightOperand, finder);
    }
    else if (source instanceof TernaryExpression) {
        visitExpression(source.logicalOperand, finder);
        visitExpression(source.trueOperand, finder);
        visitExpression(source.falseOperand, finder);
    }
    else if (source.operand) {
        const unaryOperatorExp = source;
        visitExpression(unaryOperatorExp.operand, finder);
    }
    else if (source.objectOperand) {
        const memberOperatorExp = source;
        visitExpression(memberOperatorExp.objectOperand, finder);
    }
};
export const replaceExpression = (source, finder) => {
    const rsource = finder(source);
    if (rsource !== source) {
        return rsource;
    }
    if (source.rightOperand) {
        const binaryOperatorExp = source;
        binaryOperatorExp.leftOperand = replaceExpression(binaryOperatorExp.leftOperand, finder);
        binaryOperatorExp.rightOperand = replaceExpression(binaryOperatorExp.rightOperand, finder);
    }
    else if (source instanceof TernaryExpression) {
        source.logicalOperand = replaceExpression(source.logicalOperand, finder);
        source.trueOperand = replaceExpression(source.trueOperand, finder);
        source.falseOperand = replaceExpression(source.falseOperand, finder);
    }
    else if (source.operand) {
        const unaryOperatorExp = source;
        unaryOperatorExp.operand = replaceExpression(unaryOperatorExp.operand, finder);
    }
    else if (source.objectOperand) {
        const memberOperatorExp = source;
        memberOperatorExp.objectOperand = replaceExpression(memberOperatorExp.objectOperand, finder);
    }
    return source;
};
export const isEntityExp = (data) => {
    return !!data.entityTypes;
};
export const isExpression = (data) => {
    return !!(data && data.type && data.hashCode && data.clone);
};
export const isGroupExp = (data) => {
    return !!data.itemSelect;
};
export const isColumnExp = (data) => {
    return !!data.entity;
};
export const isValue = (data) => {
    return !isNull(data) && isValueType(data.constructor);
};
export const isValueType = (type) => {
    switch (type) {
        case Number:
        case String:
        case Date:
        case TimeSpan:
        case Uuid:
        case Boolean:
        case ArrayBuffer:
        // TypedArray
        case Uint8Array:
        case Uint16Array:
        case Uint32Array:
        case Int8Array:
        case Int16Array:
        case Int32Array:
        case Uint8ClampedArray:
        case Float32Array:
        case Float64Array:
        case DataView:
            return true;
        default:
            return false;
    }
};
export const isNull = (value) => {
    return value === null || value === undefined;
};
export const isNativeFunction = (fn) => {
    return fn.toString().indexOf("=>") < 0 && !("prototype" in fn);
};
export const clone = (source, isDeep = false) => {
    if (!source)
        return source;
    const res = {};
    for (const prop in source) {
        let val = source[prop];
        if (isDeep && val && val.constructor === Object) {
            val = clone(val, isDeep);
        }
        res[prop] = val;
    }
    return res;
};
export const fillZero = (value, factor = 2) => {
    const isNegative = value < 0;
    if (isNegative) {
        value = Math.abs(value);
    }
    let result = value + "";
    if (result.length < factor) {
        result = ("0").repeat(factor - result.length) + result;
    }
    return (isNegative ? "-" : "") + result;
};
/**
 *
 * @param str source: http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
 */
export const hashCode = (str, hash = 0) => {
    if (!str || str.length === 0) {
        return hash;
    }
    for (let i = 0, len = str.length; i < len; i++) {
        hash = hashCodeAdd(hash, str.charCodeAt(i));
    }
    return hash;
};
export const hashCodeAdd = (hash, add) => {
    hash = ((hash << 5) - hash) + add;
    hash |= 0;
    return hash;
};
export const toJSON = function () {
    const proto = this.constructor.prototype;
    const jsonObj = {};
    for (const o of Object.keys(this).union(Object.keys(proto))) {
        jsonObj[o] = this[o];
    }
    return jsonObj;
};
export const toDateTimeString = function (date) {
    return date.getFullYear() + "-" + fillZero(date.getMonth() + 1) + "-" + fillZero(date.getDate()) + " " +
        fillZero(date.getHours()) + ":" + fillZero(date.getMinutes()) + ":" + fillZero(date.getSeconds()) + "." + fillZero(date.getMilliseconds(), 3);
};
export const toTimeString = function (time) {
    return fillZero(time.getHours()) + ":" + fillZero(time.getMinutes()) + ":" + fillZero(time.getSeconds()) + "." + fillZero(time.getMilliseconds(), 3);
};
export const toDateString = function (date) {
    return date.getFullYear() + "-" + fillZero(date.getMonth() + 1) + "-" + fillZero(date.getDate());
};
export const hasFlags = function (value, flag) {
    return !!(value & flag);
};
//# sourceMappingURL=data:application/json;base64,