export class SortedArray extends Array {
    set length(value) {
        this.splice(value);
    }
    constructor(comparator, ...items) {
        super(...items);
        this.comparator = comparator;
        Object.setPrototypeOf(this, SortedArray.prototype);
    }
    static create(compareFunction, ...items) {
        return new SortedArray(compareFunction, ...items);
    }
    push(...items) {
        for (const o of items) {
            this.addItem(o);
        }
        return this.length;
    }
    splice(start, deleteCount, ...items) {
        const result = typeof deleteCount === "undefined" ? super.splice(start) : super.splice(start, deleteCount);
        for (const o of items) {
            this.addItem(o);
        }
        return result;
    }
    unshift(...items) {
        for (const o of items) {
            this.addItem(o);
        }
        return this.length;
    }
    addItem(item, start = 0, end = this.length - 1) {
        if (this.length <= 0) {
            super.push(item);
        }
        else if (this.comparator(this[start], item) > 0) {
            super.unshift(item);
        }
        else if (this.comparator(this[end], item) <= 0) {
            super.push(item);
        }
        else {
            while (start < end) {
                const half = Math.floor(start + end / 2);
                const halfItem = this[half];
                if (this.comparator(item, halfItem) > 0) {
                    start = start === half ? half + 1 : half;
                }
                else if (this.comparator(item, halfItem) < 0) {
                    end = half;
                }
                else {
                    start = end = half;
                }
            }
            super.splice(start, 0, item);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU29ydGVkQXJyYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9QYWNrYWdlcy9Uc1Byb2ovc3JjL3NyYy9Db21tb24vU29ydGVkQXJyYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLFdBQWUsU0FBUSxLQUFRO0lBQ3hDLElBQVcsTUFBTSxDQUFDLEtBQWE7UUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBQ0QsWUFBNkIsVUFBMEMsRUFBRSxHQUFHLEtBQVU7UUFDbEYsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFEUyxlQUFVLEdBQVYsVUFBVSxDQUFnQztRQUVuRSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUNNLE1BQU0sQ0FBQyxNQUFNLENBQUksZUFBK0MsRUFBRSxHQUFHLEtBQVU7UUFDbEYsT0FBTyxJQUFJLFdBQVcsQ0FBQyxlQUFlLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBQ00sSUFBSSxDQUFDLEdBQUcsS0FBVTtRQUNyQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBQ00sTUFBTSxDQUFDLEtBQWEsRUFBRSxXQUFvQixFQUFFLEdBQUcsS0FBVTtRQUM1RCxNQUFNLE1BQU0sR0FBUSxPQUFPLFdBQVcsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2hILEtBQUssTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixDQUFDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNNLE9BQU8sQ0FBQyxHQUFHLEtBQVU7UUFDeEIsS0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUNTLE9BQU8sQ0FBQyxJQUFPLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDO1FBQ3ZELElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNuQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLENBQUM7YUFDSSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzlDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsQ0FBQzthQUNJLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDN0MsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixDQUFDO2FBQ0ksQ0FBQztZQUNGLE9BQU8sS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUFDO2dCQUNqQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDNUIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztvQkFDdEMsS0FBSyxHQUFHLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDN0MsQ0FBQztxQkFDSSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO29CQUMzQyxHQUFHLEdBQUcsSUFBSSxDQUFDO2dCQUNmLENBQUM7cUJBQ0ksQ0FBQztvQkFDRixLQUFLLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztnQkFDdkIsQ0FBQztZQUNMLENBQUM7WUFDRCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDakMsQ0FBQztJQUNMLENBQUM7Q0FDSiJ9