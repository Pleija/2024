const toHex = (u) => {
    const a = (u).toString(16);
    return a.length < 2 ? "0" + a : a;
};
export class Uuid extends Uint8Array {
    constructor(uuid) {
        super(16);
        if (uuid) {
            this.parse(uuid);
        }
    }
    static new() {
        const res = new Uuid();
        this.randomGenerator(res);
        res[6] &= 0x0F;
        res[6] |= 0x40;
        res[8] &= 0x3F;
        res[8] |= 0x80;
        return res;
    }
    [Symbol.toPrimitive]() {
        return this.toString();
    }
    toJSON() {
        return this.toString();
    }
    toString() {
        let res = "";
        let i = 0;
        let stopper = 4;
        while (i < 16) {
            while (i < stopper) {
                res += toHex(this[i++]);
            }
            if (stopper <= 12) {
                stopper += 2;
                res += "-";
                if (stopper === 12) {
                    stopper = 16;
                }
            }
        }
        return res;
    }
    parse(uuid) {
        const l = uuid.length;
        for (let i = 0, j = 0; j < 16 && i < l; i += 2) {
            if (uuid[i] === "-") {
                i++;
            }
            this[j++] = parseInt(uuid.slice(i, i + 2), 16);
        }
    }
}
Uuid.empty = new Uuid();
const globThis = global || globalThis;
if (globThis.crypto && globThis.crypto.getRandomValues) {
    Uuid.randomGenerator = (res) => globThis.crypto.getRandomValues(res);
}
else {
    Uuid.randomGenerator = (res) => {
        for (let i = 0, len = res.length; i < len; i++) {
            res[i] = Math.floor(Math.random() * 256);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXVpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL1BhY2thZ2VzL1RzUHJvai9zcmMvc3JjL0NvbW1vbi9VdWlkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUU7SUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0IsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQztBQUNGLE1BQU0sT0FBTyxJQUFLLFNBQVEsVUFBVTtJQUNoQyxZQUFZLElBQWE7UUFDckIsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1YsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNQLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsQ0FBQztJQUNMLENBQUM7SUFHTSxNQUFNLENBQUMsR0FBRztRQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUxQixHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO1FBQ2YsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQztRQUVmLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDZixHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO1FBQ2YsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ00sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFDTSxNQUFNO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUNNLFFBQVE7UUFDWCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDaEIsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7WUFDWixPQUFPLENBQUMsR0FBRyxPQUFPLEVBQUUsQ0FBQztnQkFDakIsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzVCLENBQUM7WUFDRCxJQUFJLE9BQU8sSUFBSSxFQUFFLEVBQUUsQ0FBQztnQkFDaEIsT0FBTyxJQUFJLENBQUMsQ0FBQztnQkFDYixHQUFHLElBQUksR0FBRyxDQUFDO2dCQUNYLElBQUksT0FBTyxLQUFLLEVBQUUsRUFBRSxDQUFDO29CQUNqQixPQUFPLEdBQUcsRUFBRSxDQUFDO2dCQUNqQixDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUM7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDUyxLQUFLLENBQUMsSUFBWTtRQUN4QixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3RCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUM3QyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztnQkFDbEIsQ0FBQyxFQUFFLENBQUM7WUFDUixDQUFDO1lBQ0QsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNuRCxDQUFDO0lBQ0wsQ0FBQzs7QUE3Q3NCLFVBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0FBZ0Q5QyxNQUFNLFFBQVEsR0FBUSxNQUFNLElBQUksVUFBVSxDQUFDO0FBQzNDLElBQUksUUFBUSxDQUFDLE1BQU0sSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3JELElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxHQUFTLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQy9FLENBQUM7S0FDSSxDQUFDO0lBQ0YsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLEdBQVMsRUFBRSxFQUFFO1FBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM3QyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDN0MsQ0FBQztJQUNMLENBQUMsQ0FBQztBQUNOLENBQUMifQ==