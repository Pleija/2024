export class ObservableArray extends Array {
    // TODO: NOT WORKING
    // public set length(value: number) {
    //     this.splice(value);
    // }
    constructor(...items) {
        super(...items);
        this._observers = [];
    }
    static observe(items) {
        Object.setPrototypeOf(items, ObservableArray.prototype);
        const observable = items;
        observable._observers = [];
        return observable;
    }
    pop() {
        const hasAny = this.length > 0;
        const result = super.pop();
        if (hasAny) {
            this.raiseEvents("del", [result]);
        }
        return result;
    }
    push(...items) {
        const result = super.push(...items);
        if (items.length > 0) {
            this.raiseEvents("add", items);
        }
        return result;
    }
    register(observer) {
        this._observers.push(observer);
    }
    shift() {
        const hasAny = this.length > 0;
        const result = super.shift();
        if (hasAny) {
            this.raiseEvents("del", [result]);
        }
        return result;
    }
    splice(start, deleteCount, ...items) {
        const result = super.splice(start, deleteCount, ...items);
        if (result.length > 0) {
            this.raiseEvents("del", result);
        }
        if (items.length > 0) {
            this.raiseEvents("add", items);
        }
        return result;
    }
    unobserve() {
        this._observers = [];
    }
    unshift(...items) {
        const result = super.unshift(...items);
        if (items.length > 0) {
            this.raiseEvents("add", items);
        }
        return result;
    }
    raiseEvents(eventType, items) {
        for (const observer of this._observers) {
            observer(eventType, items);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JzZXJ2YWJsZUFycmF5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vUGFja2FnZXMvVHNQcm9qL3NyYy9zcmMvQ29tbW9uL09ic2VydmFibGVBcnJheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxNQUFNLE9BQU8sZUFBbUIsU0FBUSxLQUFRO0lBQzVDLG9CQUFvQjtJQUNwQixxQ0FBcUM7SUFDckMsMEJBQTBCO0lBQzFCLElBQUk7SUFDSixZQUFtQixHQUFHLEtBQVU7UUFDNUIsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFRWixlQUFVLEdBQTRELEVBQUUsQ0FBQztJQVBqRixDQUFDO0lBQ00sTUFBTSxDQUFDLE9BQU8sQ0FBSSxLQUFVO1FBQy9CLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4RCxNQUFNLFVBQVUsR0FBRyxLQUEyQixDQUFDO1FBQy9DLFVBQVUsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQzNCLE9BQU8sVUFBVSxDQUFDO0lBQ3RCLENBQUM7SUFFTSxHQUFHO1FBQ04sTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDL0IsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzNCLElBQUksTUFBTSxFQUFFLENBQUM7WUFDVCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTSxJQUFJLENBQUMsR0FBRyxLQUFVO1FBQ3JCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUNwQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkMsQ0FBQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTSxRQUFRLENBQUMsUUFBMEQ7UUFDdEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNNLEtBQUs7UUFDUixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUMvQixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDN0IsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNULElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNNLE1BQU0sQ0FBQyxLQUFhLEVBQUUsV0FBb0IsRUFBRSxHQUFHLEtBQVU7UUFDNUQsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDMUQsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFDRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkMsQ0FBQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTSxTQUFTO1FBQ1osSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUNNLE9BQU8sQ0FBQyxHQUFHLEtBQVU7UUFDeEIsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNuQixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuQyxDQUFDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNTLFdBQVcsQ0FBQyxTQUEwQixFQUFFLEtBQVU7UUFDeEQsS0FBSyxNQUFNLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDckMsUUFBUSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvQixDQUFDO0lBQ0wsQ0FBQztDQUNKIn0=