import { AdditionAssignmentExpression } from "./Expression/AdditionAssignmentExpression";
import { AdditionExpression } from "./Expression/AdditionExpression";
import { AndExpression } from "./Expression/AndExpression";
import { AssignmentExpression } from "./Expression/AssignmentExpression";
import { BitwiseAndAssignmentExpression } from "./Expression/BitwiseAndAssignmentExpression";
import { BitwiseAndExpression } from "./Expression/BitwiseAndExpression";
import { BitwiseNotExpression } from "./Expression/BitwiseNotExpression";
import { BitwiseOrAssignmentExpression } from "./Expression/BitwiseOrAssignmentExpression";
import { BitwiseOrExpression } from "./Expression/BitwiseOrExpression";
import { BitwiseSignedRightShiftAssignmentExpression } from "./Expression/BitwiseSignedRightShiftAssignmentExpression";
import { BitwiseSignedRightShiftExpression } from "./Expression/BitwiseSignedRightShiftExpression";
import { BitwiseXorAssignmentExpression } from "./Expression/BitwiseXorAssignmentExpression";
import { BitwiseXorExpression } from "./Expression/BitwiseXorExpression";
import { BitwiseZeroLeftShiftAssignmentExpression } from "./Expression/BitwiseZeroLeftShiftAssignmentExpression";
import { BitwiseZeroLeftShiftExpression } from "./Expression/BitwiseZeroLeftShiftExpression";
import { BitwiseZeroRightShiftAssignmentExpression } from "./Expression/BitwiseZeroRightShiftAssignmentExpression";
import { BitwiseZeroRightShiftExpression } from "./Expression/BitwiseZeroRightShiftExpression";
import { DivisionAssignmentExpression } from "./Expression/DivisionAssignmentExpression";
import { DivisionExpression } from "./Expression/DivisionExpression";
import { EqualExpression } from "./Expression/EqualExpression";
import { ExponentiationAssignmentExpression } from "./Expression/ExponentiationAssignmentExpression";
import { ExponentiationExpression } from "./Expression/ExponentiationExpression";
import { GreaterEqualExpression } from "./Expression/GreaterEqualExpression";
import { GreaterThanExpression } from "./Expression/GreaterThanExpression";
import { InstanceofExpression } from "./Expression/InstanceofExpression";
import { LeftDecrementExpression } from "./Expression/LeftDecrementExpression";
import { LeftIncrementExpression } from "./Expression/LeftIncrementExpression";
import { LessEqualExpression } from "./Expression/LessEqualExpression";
import { LessThanExpression } from "./Expression/LessThanExpression";
import { MemberAccessExpression } from "./Expression/MemberAccessExpression";
import { ModulusAssignmentExpression } from "./Expression/ModulusAssignmentExpression";
import { ModulusExpression } from "./Expression/ModulusExpression";
import { MultiplicationAssignmentExpression } from "./Expression/MultiplicationAssignmentExpression";
import { MultiplicationExpression } from "./Expression/MultiplicationExpression";
import { NegationExpression } from "./Expression/NegationExpression";
import { NotEqualExpression } from "./Expression/NotEqualExpression";
import { NotExpression } from "./Expression/NotExpression";
import { OrExpression } from "./Expression/OrExpression";
import { RightDecrementExpression } from "./Expression/RightDecrementExpression";
import { RightIncrementExpression } from "./Expression/RightIncrementExpression";
import { SpreadExpression } from "./Expression/SpreadExpression";
import { StrictEqualExpression } from "./Expression/StrictEqualExpression";
import { StrictNotEqualExpression } from "./Expression/StrictNotEqualExpression";
import { SubstractionAssignmentExpression } from "./Expression/SubstractionAssignmentExpression";
import { SubstractionExpression } from "./Expression/SubstractionExpression";
import { TernaryExpression } from "./Expression/TernaryExpression";
import { TypeofExpression } from "./Expression/TypeofExpression";
export var Associativity;
(function (Associativity) {
    Associativity[Associativity["None"] = 0] = "None";
    Associativity[Associativity["Left"] = 1] = "Left";
    Associativity[Associativity["Right"] = 2] = "Right";
})(Associativity || (Associativity = {}));
export var OperatorType;
(function (OperatorType) {
    OperatorType[OperatorType["Unary"] = 0] = "Unary";
    OperatorType[OperatorType["Binary"] = 1] = "Binary";
    OperatorType[OperatorType["Ternary"] = 2] = "Ternary";
})(OperatorType || (OperatorType = {}));
export var UnaryPosition;
(function (UnaryPosition) {
    UnaryPosition[UnaryPosition["Prefix"] = 0] = "Prefix";
    UnaryPosition[UnaryPosition["Postfix"] = 1] = "Postfix";
})(UnaryPosition || (UnaryPosition = {}));
export const operators = [
    { identifier: "[", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 20, associativity: Associativity.None } },
    { identifier: "(", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 20, associativity: Associativity.None } },
    { identifier: "...", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 20, associativity: Associativity.None }, expressionFactory: (op) => new SpreadExpression(op) },
    { identifier: ".", type: OperatorType.Binary, precedence: { precedence: 19, associativity: Associativity.Left }, expressionFactory: (objectExp, memberName) => new MemberAccessExpression(objectExp, memberName) },
    { identifier: "[", type: OperatorType.Binary, precedence: { precedence: 19, associativity: Associativity.Left } },
    { identifier: "new", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 19, associativity: Associativity.None } },
    { identifier: "(", type: OperatorType.Binary, precedence: { precedence: 18, associativity: Associativity.Left } },
    // <IUnaryOperator>{ identifier: "function", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 19, associativity: Associativity.Left } },
    // <IUnaryOperator>{ identifier: "new", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 18, associativity: Associativity.Right } },
    { identifier: "++", type: OperatorType.Unary, position: UnaryPosition.Postfix, precedence: { precedence: 17, associativity: Associativity.None }, expressionFactory: (op) => new RightIncrementExpression(op) },
    { identifier: "--", type: OperatorType.Unary, position: UnaryPosition.Postfix, precedence: { precedence: 17, associativity: Associativity.None }, expressionFactory: (op) => new RightDecrementExpression(op) },
    { identifier: "!", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 16, associativity: Associativity.Right }, expressionFactory: (op) => new NotExpression(op) },
    { identifier: "~", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 16, associativity: Associativity.Right }, expressionFactory: (op) => new BitwiseNotExpression(op) },
    { identifier: "+", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 16, associativity: Associativity.Right }, expressionFactory: (exp) => exp },
    { identifier: "-", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 16, associativity: Associativity.Right }, expressionFactory: (op) => new NegationExpression(op) },
    { identifier: "++", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 16, associativity: Associativity.Right }, expressionFactory: (op) => new LeftIncrementExpression(op) },
    { identifier: "--", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 16, associativity: Associativity.Right }, expressionFactory: (op) => new LeftDecrementExpression(op) },
    { identifier: "typeof", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 16, associativity: Associativity.Right }, expressionFactory: (op) => new TypeofExpression(op) },
    // <IUnaryOperator>{ identifier: "void", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 16, associativity: Associativity.Right } },
    // <IUnaryOperator>{ identifier: "delete", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 16, associativity: Associativity.Right } },
    // <IUnaryOperator>{ identifier: "await", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 16, associativity: Associativity.Right } },
    { identifier: "**", type: OperatorType.Binary, precedence: { precedence: 15, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new ExponentiationExpression(op1, op2) },
    { identifier: "*", type: OperatorType.Binary, precedence: { precedence: 14, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new MultiplicationExpression(op1, op2) },
    { identifier: "/", type: OperatorType.Binary, precedence: { precedence: 14, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new DivisionExpression(op1, op2) },
    { identifier: "%", type: OperatorType.Binary, precedence: { precedence: 14, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new ModulusExpression(op1, op2) },
    { identifier: "+", type: OperatorType.Binary, precedence: { precedence: 13, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new AdditionExpression(op1, op2) },
    { identifier: "-", type: OperatorType.Binary, precedence: { precedence: 13, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new SubstractionExpression(op1, op2) },
    { identifier: "<<", type: OperatorType.Binary, precedence: { precedence: 12, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new BitwiseZeroLeftShiftExpression(op1, op2) },
    { identifier: ">>", type: OperatorType.Binary, precedence: { precedence: 12, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new BitwiseZeroRightShiftExpression(op1, op2) },
    { identifier: ">>>", type: OperatorType.Binary, precedence: { precedence: 12, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new BitwiseSignedRightShiftExpression(op1, op2) },
    { identifier: "<", type: OperatorType.Binary, precedence: { precedence: 11, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new LessThanExpression(op1, op2) },
    { identifier: "<=", type: OperatorType.Binary, precedence: { precedence: 11, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new LessEqualExpression(op1, op2) },
    { identifier: ">", type: OperatorType.Binary, precedence: { precedence: 11, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new GreaterThanExpression(op1, op2) },
    { identifier: ">=", type: OperatorType.Binary, precedence: { precedence: 11, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new GreaterEqualExpression(op1, op2) },
    { identifier: "in", type: OperatorType.Binary, precedence: { precedence: 11, associativity: Associativity.Left }, expressionFactory: () => { throw new Error("operator not supported"); } },
    { identifier: "instanceof", type: OperatorType.Binary, precedence: { precedence: 11, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new InstanceofExpression(op1, op2) },
    { identifier: "==", type: OperatorType.Binary, precedence: { precedence: 10, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new EqualExpression(op1, op2) },
    { identifier: "!=", type: OperatorType.Binary, precedence: { precedence: 10, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new NotEqualExpression(op1, op2) },
    { identifier: "===", type: OperatorType.Binary, precedence: { precedence: 10, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new StrictEqualExpression(op1, op2) },
    { identifier: "!==", type: OperatorType.Binary, precedence: { precedence: 10, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new StrictNotEqualExpression(op1, op2) },
    { identifier: "&", type: OperatorType.Binary, precedence: { precedence: 9, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new BitwiseAndExpression(op1, op2) },
    { identifier: "^", type: OperatorType.Binary, precedence: { precedence: 8, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new BitwiseXorExpression(op1, op2) },
    { identifier: "|", type: OperatorType.Binary, precedence: { precedence: 7, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new BitwiseOrExpression(op1, op2) },
    { identifier: "&&", type: OperatorType.Binary, precedence: { precedence: 6, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new AndExpression(op1, op2) },
    { identifier: "||", type: OperatorType.Binary, precedence: { precedence: 5, associativity: Associativity.Left }, expressionFactory: (op1, op2) => new OrExpression(op1, op2) },
    { identifier: "?", type: OperatorType.Ternary, precedence: { precedence: 4, associativity: Associativity.Right }, expressionFactory: (op1, op2, op3) => new TernaryExpression(op1, op2, op3) },
    { identifier: "=", type: OperatorType.Binary, precedence: { precedence: 3, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new AssignmentExpression(op1, op2) },
    { identifier: "+=", type: OperatorType.Binary, precedence: { precedence: 3, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new AdditionAssignmentExpression(op1, op2) },
    { identifier: "-=", type: OperatorType.Binary, precedence: { precedence: 3, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new SubstractionAssignmentExpression(op1, op2) },
    { identifier: "**=", type: OperatorType.Binary, precedence: { precedence: 3, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new ExponentiationAssignmentExpression(op1, op2) },
    { identifier: "*=", type: OperatorType.Binary, precedence: { precedence: 3, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new MultiplicationAssignmentExpression(op1, op2) },
    { identifier: "/=", type: OperatorType.Binary, precedence: { precedence: 3, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new DivisionAssignmentExpression(op1, op2) },
    { identifier: "%=", type: OperatorType.Binary, precedence: { precedence: 3, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new ModulusAssignmentExpression(op1, op2) },
    { identifier: "<<=", type: OperatorType.Binary, precedence: { precedence: 3, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new BitwiseZeroLeftShiftAssignmentExpression(op1, op2) },
    { identifier: ">>=", type: OperatorType.Binary, precedence: { precedence: 3, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new BitwiseZeroRightShiftAssignmentExpression(op1, op2) },
    { identifier: ">>>=", type: OperatorType.Binary, precedence: { precedence: 3, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new BitwiseSignedRightShiftAssignmentExpression(op1, op2) },
    { identifier: "&=", type: OperatorType.Binary, precedence: { precedence: 3, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new BitwiseAndAssignmentExpression(op1, op2) },
    { identifier: "^=", type: OperatorType.Binary, precedence: { precedence: 3, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new BitwiseXorAssignmentExpression(op1, op2) },
    { identifier: "|=", type: OperatorType.Binary, precedence: { precedence: 3, associativity: Associativity.Right }, expressionFactory: (op1, op2) => new BitwiseOrAssignmentExpression(op1, op2) }
    // <IUnaryOperator>{ identifier: "yield*", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 2, associativity: Associativity.Right } },
    // <IUnaryOperator>{ identifier: "yield", type: OperatorType.Unary, position: UnaryPosition.Prefix, precedence: { precedence: 2, associativity: Associativity.Right } },
    // coma used as a breaker
    // { identifier: ",", type: OperatorType.Binary, precedence: { precedence: 1, associativity: Associativity.Left } }
];
//# sourceMappingURL=data:application/json;base64,