import { CrossJoinEnumerable } from "./CrossJoinEnumerable";
import { DistinctEnumerable } from "./DistinctEnumerable";
import { Enumerable } from "./Enumerable";
import { ExceptEnumerable } from "./ExceptEnumerable";
import { FullJoinEnumerable } from "./FullJoinEnumerable";
import { GroupByEnumerable } from "./GroupByEnumerable";
import { GroupJoinEnumerable } from "./GroupJoinEnumerable";
import { defaultResultFn, InnerJoinEnumerable } from "./InnerJoinEnumerable";
import { IntersectEnumerable } from "./IntersectEnumerable";
import { LeftJoinEnumerable } from "./LeftJoinEnumerable";
import { OrderEnumerable } from "./OrderEnumerable";
import { RightJoinEnumerable } from "./RightJoinEnumerable";
import { SelectEnumerable } from "./SelectEnumerable";
import { SelectManyEnumerable } from "./SelectManyEnumerable";
import { SkipEnumerable } from "./SkipEnumerable";
import { TakeEnumerable } from "./TakeEnumerable";
import { UnionEnumerable } from "./UnionEnumerable";
import { WhereEnumerable } from "./WhereEnumerable";
Enumerable.prototype.cast = function () {
    return this;
};
Enumerable.prototype.select = function (typeOrSelector, selector) {
    let type;
    if (!selector) {
        selector = typeOrSelector;
    }
    else {
        type = typeOrSelector;
    }
    return new SelectEnumerable(this, selector, type);
};
Enumerable.prototype.selectMany = function (selector) {
    return new SelectManyEnumerable(this, selector);
};
Enumerable.prototype.where = function (predicate) {
    return new WhereEnumerable(this, predicate);
};
Enumerable.prototype.orderBy = function (...selectors) {
    return new OrderEnumerable(this, ...selectors);
};
Enumerable.prototype.skip = function (skip) {
    return new SkipEnumerable(this, skip);
};
Enumerable.prototype.take = function (take) {
    return new TakeEnumerable(this, take);
};
Enumerable.prototype.groupBy = function (keySelector) {
    return new GroupByEnumerable(this, keySelector);
};
Enumerable.prototype.distinct = function (selector) {
    return new DistinctEnumerable(this, selector);
};
Enumerable.prototype.innerJoin = function (array2, relation, resultSelector = defaultResultFn) {
    return new InnerJoinEnumerable(this, Enumerable.from(array2), relation, resultSelector);
};
Enumerable.prototype.leftJoin = function (array2, relation, resultSelector = defaultResultFn) {
    return new LeftJoinEnumerable(this, Enumerable.from(array2), relation, resultSelector);
};
Enumerable.prototype.rightJoin = function (array2, relation, resultSelector = defaultResultFn) {
    return new RightJoinEnumerable(this, Enumerable.from(array2), relation, resultSelector);
};
Enumerable.prototype.fullJoin = function (array2, relation, resultSelector = defaultResultFn) {
    return new FullJoinEnumerable(this, Enumerable.from(array2), relation, resultSelector);
};
Enumerable.prototype.groupJoin = function (array2, relation, resultSelector = defaultResultFn) {
    return new GroupJoinEnumerable(this, Enumerable.from(array2), relation, resultSelector);
};
Enumerable.prototype.crossJoin = function (array2, resultSelector = defaultResultFn) {
    return new CrossJoinEnumerable(this, Enumerable.from(array2), resultSelector);
};
Enumerable.prototype.union = function (array2, isUnionAll = false) {
    return new UnionEnumerable(this, Enumerable.from(array2), isUnionAll);
};
Enumerable.prototype.intersect = function (array2) {
    return new IntersectEnumerable(this, Enumerable.from(array2));
};
Enumerable.prototype.except = function (array2) {
    return new ExceptEnumerable(this, Enumerable.from(array2));
};
Enumerable.prototype.pivot = function (dimensions, metrics) {
    return new SelectEnumerable(new GroupByEnumerable(this, (o) => {
        const dimensionKey = {};
        for (const key in dimensions) {
            if (dimensions[key] instanceof Function) {
                dimensionKey[key] = dimensions[key](o);
            }
        }
        return dimensionKey;
    }), (o) => {
        for (const key in metrics) {
            if (o.key) {
                o.key[key] = metrics[key](o.toArray());
            }
        }
        return o.key;
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW51bWVyYWJsZS5wYXJ0aWFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vUGFja2FnZXMvVHNQcm9qL3NyYy9lbGN5L0VudW1lcmFibGUvRW51bWVyYWJsZS5wYXJ0aWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzVELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzFELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFeEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTdFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzVELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzFELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8s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