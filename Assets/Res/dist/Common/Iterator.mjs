var CSObject = CS.System.Object;
var CSArray = CS.System.Array;
var $typeof = puer.$typeof;
var $generic = puer.$generic;
function defineArrayIterator(prototype) {
    prototype["forEach"] = function (callbackfn) {
        let length = this.Length;
        for (let i = 0; i < length; i++) {
            if (callbackfn(this.GetValue(i), i) === false)
                break;
        }
    };
    prototype[Symbol.iterator] = function* () {
        let length = this.Length;
        for (let i = 0; i < length; i++) {
            yield this.GetValue(i);
        }
    };
}
function defineListIterator(prototype) {
    prototype["forEach"] = function (callbackfn) {
        let iterator = this.GetEnumerator(), index = 0;
        while (iterator.MoveNext()) {
            if (callbackfn(iterator.Current, index++) === false)
                break;
        }
    };
    prototype[Symbol.iterator] = function* () {
        let iterator = this.GetEnumerator();
        while (iterator.MoveNext()) {
            yield iterator.Current;
        }
    };
}
function defineDictionaryIterator(prototype) {
    prototype["forEach"] = function (callbackfn) {
        let iterator = this.Keys.GetEnumerator();
        while (iterator.MoveNext()) {
            let key = iterator.Current;
            if (callbackfn(this.get_Item(key), key) === false)
                break;
        }
    };
    prototype["getKeys"] = function () {
        let result = new Array();
        let iterator = this.Keys.GetEnumerator();
        while (iterator.MoveNext()) {
            result.push(iterator.Current);
        }
        return result;
    };
    prototype["getValues"] = function () {
        let result = new Array();
        let iterator = this.Values.GetEnumerator();
        while (iterator.MoveNext()) {
            result.push(iterator.Current);
        }
        return result;
    };
    prototype[Symbol.iterator] = function* () {
        let iterator = this.Keys.GetEnumerator();
        while (iterator.MoveNext()) {
            let key = iterator.Current;
            yield ({ key: key, value: this.get_Item(key) });
        }
    };
}
function defineIEnumeratorIterator(prototype) {
    prototype["forEach"] = function (callbackfn) {
        let iterator = this.GetEnumerator(), index = 0;
        while (iterator.MoveNext()) {
            if (callbackfn(iterator.Current, index++) === false)
                break;
        }
    };
    prototype[Symbol.iterator] = function* () {
        let iterator = this.GetEnumerator();
        while (iterator.MoveNext()) {
            yield iterator.Current;
        }
    };
}
const ITERATOR_DEFINE = Symbol(`ITERATOR_DEFINE`);
export function iterator() {
    const instance = arguments[0];
    if (!(instance instanceof CSObject)) {
        throw new Error(`Invalid parameter. You need to pass in a chsarp object`);
    }
    const prototype = Object.getPrototypeOf(instance);
    if (!(ITERATOR_DEFINE in prototype)) {
        const Type = instance.GetType();
        if ($typeof(CSArray).IsAssignableFrom(Type)) {
            defineArrayIterator(prototype);
        }
        else {
            let type = Type, define = false;
            while (type) {
                let fullname = type.FullName;
                if (!fullname)
                    break;
                if (fullname.startsWith("System.Collections.Generic.List`1[")) {
                    defineListIterator(prototype);
                    define = true;
                }
                else if (fullname.startsWith("System.Collections.Generic.Dictionary`2[")) {
                    defineDictionaryIterator(prototype);
                    define = true;
                }
                type = type.BaseType;
            }
            if (!define) {
                if ("GetEnumerator" in instance && typeof instance["GetEnumerator"] === "function") {
                    defineIEnumeratorIterator(prototype);
                }
                else {
                    throw new Error(`Unsupported chsarp type: ${Type.FullName}`);
                }
            }
        }
        prototype[ITERATOR_DEFINE] = true;
    }
    return instance;
}
function test() {
    const execute = (title, fn) => {
        try {
            console.log(`=====================${title}=====================`);
            fn();
            console.log(`===================== success ====================`);
        }
        catch (e) {
            console.log(`=====================  <color=red>fail</color>  =====================\n${e}`);
        }
    };
    execute(`Array`, () => {
        let obj = CS.System.Array.CreateInstance($typeof(CS.System.Int32), 5);
        obj.set_Item(0, 1);
        obj.set_Item(1, 2);
        obj.set_Item(2, 3);
        console.log(JSON.stringify([...iterator(obj)]));
        iterator(obj).forEach((value, index) => {
            console.log(index, value);
        });
    });
    execute(`List`, () => {
        const List_Number = $generic(CS.System.Collections.Generic.List$1, CS.System.Int32);
        let obj = new List_Number();
        obj.Add(4);
        obj.Add(5);
        obj.Add(6);
        console.log(JSON.stringify([...iterator(obj)]));
        iterator(obj).forEach((value, index) => {
            console.log(index, value);
        });
    });
    execute(`Dictionary`, () => {
        const Dictionary_Number_String = $generic(CS.System.Collections.Generic.Dictionary$2, CS.System.Int32, CS.System.String);
        let obj = new Dictionary_Number_String();
        obj.set_Item(1, `message 1`);
        obj.set_Item(2, `message 2`);
        obj.set_Item(3, `message 3`);
        console.log(JSON.stringify(iterator(obj).getKeys()));
        console.log(JSON.stringify(iterator(obj).getValues()));
        console.log(JSON.stringify([...iterator(obj)]));
        iterator(obj).forEach((value, key) => {
            console.log(key, value);
        });
    });
    execute(`Hashtable`, () => {
        let obj = new CS.System.Collections.Hashtable();
        obj.Add(`key1`, `message 1`);
        obj.Add(`key2`, `message 2`);
        obj.Add(`key3`, `message 3`);
        console.log(JSON.stringify([...iterator(obj)]));
        iterator(obj).forEach((value, key) => {
            console.log(key, value);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,